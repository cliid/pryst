// Test lambda function syntax and type checking
fn main() -> void {
    print("=== Basic Lambda Tests ===\n");

    // Basic lambda with explicit types
    print("Test 1: Simple lambda with explicit return type");
    let add = (int x, int y) -> int {
        return x + y;
    };
    let result = add(5, 3);  // Should be 8
    print("add(5, 3) = " + result.toString());

    // Lambda with type inference
    print("\nTest 2: Lambda with inferred return type");
    let multiply = (int x, int y) -> {
        return x * y;
    };
    print("multiply(4, 3) = " + multiply(4, 3).toString());  // Should be 12

    // Lambda assigned to explicitly typed variable
    print("\nTest 3: Lambda with explicit type declaration");
    fn<int>(int, int) subtract = (int x, int y) -> {
        return x - y;
    };
    print("subtract(10, 3) = " + subtract(10, 3).toString());  // Should be 7

    // Test 4: Single-expression lambda
    print("\nTest 4: Single-expression lambda");
    let square = (int x) -> int x * x;
    print("square(5) = " + square(5).toString());  // Should be 25

    // Test 5: Lambda with void return
    print("\nTest 5: Lambda with void return");
    let printNumber = (int x) -> void {
        print("Number is: " + x.toString());
    };
    printNumber(42);

    // Lambda capturing variables from outer scope
    print("\nTest 6: Simple variable capture");
    let base = 10;
    let addBase = (int x) -> int {
        return x + base;
    };
    print("addBase(5) = " + addBase(5).toString());  // Should be 15

    // Lambda in function argument
    print("\nTest 7: Lambda as function argument");
    fn applyOperation(fn<int>(int, int) op, int a, int b) -> int {
        return op(a, b);
    }
    let divideResult = applyOperation((int x, int y) -> {
        return x / y;
    }, 20, 4);
    print("20 / 4 = " + divideResult.toString());  // Should be 5

    // Nested lambda functions
    print("\nTest 8: Simple nested lambda");
    let createMultiplier = (int factor) -> fn<int>(int) {
        return (int x) -> {
            return x * factor;
        };
    };
    let double = createMultiplier(2);
    print("double(6) = " + double(6).toString());  // Should be 12

    print("\n=== All basic lambda tests completed ===");
}
