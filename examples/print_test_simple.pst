// Comprehensive test of print functionality in Pryst

fn test_basic_types() -> void {
    // Test basic type printing
    print(42);               // Test integer printing
    print(3.14159);         // Test float printing with more precision
    print(true);            // Test boolean printing
    print("Hello, World!"); // Test string printing

    // Test multiple arguments
    print("Number:", 42, "Float:", 3.14, "Bool:", false);

    // Test empty print
    print();                // Should print newline
}

fn test_expressions() -> void {
    // Test expressions in print
    let x = 10;
    let y = 20;
    print("Sum:", x + y);           // Test arithmetic expression
    print("Product:", x * y);       // Test another arithmetic expression
    print("Comparison:", x < y);    // Test boolean expression
}

fn test_string_formatting() -> void {
    // Test string concatenation in print
    let name = "Alice";
    let age = 30;
    print("Name: " + name + ", Age: " + age.toString());

    // Test multiple string concatenations
    let greeting = "Hello";
    let target = "World";
    print(greeting + ", " + target + "!");
}

fn test_type_conversion() -> void {
    // Test implicit type conversion
    let integer = 42;
    let float = 3.14;
    let boolean = true;

    print("Integer as string: " + integer.toString());
    print("Float as string: " + float.toString());
    print("Boolean as string: " + boolean.toString());
}

fn test_error_cases() -> void {
    // Test error cases (these should be caught at compile time)
    try {
        let invalid = null;
        print(invalid);  // Should handle null gracefully
    } catch (error) {
        print("Caught expected error:", error.message());
    }
}

fn main() -> void {
    print("=== Testing Basic Types ===");
    test_basic_types();

    print("\n=== Testing Expressions ===");
    test_expressions();

    print("\n=== Testing String Formatting ===");
    test_string_formatting();

    print("\n=== Testing Type Conversion ===");
    test_type_conversion();

    print("\n=== Testing Error Cases ===");
    test_error_cases();

    print("\n=== All Print Tests Completed ===");
}
