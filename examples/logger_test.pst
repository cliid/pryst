// Comprehensive Logger Test
// Tests debug output control and different log levels
// Run with --debug flag to see debug output

fn main() -> void {
    print("=== Logger Test ===\n");

    // Test 1: Basic debug output
    print("Test 1: Basic debug output");
    debug("This debug message should only appear with --debug flag");
    print("Basic print should always appear");

    // Test 2: Different log levels
    print("\nTest 2: Different log levels");
    debug("Debug level message");      // Blue
    info("Info level message");        // Green
    error("Error level message");      // Red

    // Test 3: String formatting in logs
    print("\nTest 3: String formatting in logs");
    let x = 42;
    let y = "test";
    debug("Debug with number " + x.toString() + " and string " + y);
    info("Info with number " + x.toString() + " and string " + y);
    error("Error with number " + x.toString() + " and string " + y);

    // Test 4: Nested function with logging
    print("\nTest 4: Nested function with logging");
    fn testFunction() -> void {
        debug("Debug from nested function");
        info("Info from nested function");
        error("Error from nested function");
    }
    testFunction();

    // Test 5: Error handling with logging
    print("\nTest 5: Error handling with logging");
    try {
        error("Simulated error in try block");
        throw "Test error";
    } catch (e) {
        debug("Debug: Caught error: " + e);
        error("Error: " + e);
    }

    // Test 6: Block-level debug statements
    print("\nTest 6: Block-level debug statements");
    {
        debug("Debug in nested block 1");
        {
            debug("Debug in nested block 2");
            info("Info in nested block 2");
            error("Error in nested block 2");
        }
        debug("Debug back in block 1");
    }

    // Test 7: Conditional logging
    print("\nTest 7: Conditional logging");
    let condition = true;
    if (condition) {
        debug("Debug: condition is true");
        info("Info: condition is true");
    } else {
        debug("Debug: condition is false");
        error("Error: condition is false");
    }

    print("\n=== Logger Test Complete ===");
}
