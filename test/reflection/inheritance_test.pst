// Test inheritance reflection
interface Movable {
    fn move() -> void;
}

class Vehicle implements Movable {
    speed: int;

    fn move() -> void {
        print("Moving at " + str(this.speed));
    }
}

class Car extends Vehicle {
    model: string;
}

class ElectricCar extends Car {
    batteryLevel: int;
}

fn testInheritance(obj: any) -> void {
    print("Testing type: " + getType(obj));
    print("Is Movable: " + str(isInstance(obj, "Movable")));
    print("Is Vehicle: " + str(isInstance(obj, "Vehicle")));
    print("Is Car: " + str(isInstance(obj, "Car")));
    print("Is ElectricCar: " + str(isInstance(obj, "ElectricCar")));
}

fn main() -> void {
    let vehicle = new Vehicle();
    let car = new Car();
    let tesla = new ElectricCar();

    testInheritance(vehicle);
    testInheritance(car);
    testInheritance(tesla);

    // Test interface implementation
    let movable: Movable = car;
    print("Is car Movable: " + str(isInstance(movable, "Movable")));

    // Test null handling with inheritance
    let nullCar: Car = null;
    testInheritance(nullCar);
}
