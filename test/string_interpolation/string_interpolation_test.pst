// Test file for string interpolation functionality

class Person {
    name: string;
    age: int;

    fn init(name: string, age: int) {
        this.name = name;
        this.age = age;
    }

    fn toString() -> string {
        return f"Person(name={this.name}, age={this.age})";
    }
}

fn testBasicInterpolation() {
    let name = "Alice";
    let age = 30;

    // Basic string interpolation
    print(f"Name: {name}");
    print(f"Age: {age}");

    // Multiple interpolations in one string
    print(f"Hello, my name is {name} and I am {age} years old.");
}

fn testNumericFormatting() {
    let pi = 3.14159;
    let large_num = 1234567;

    // Numeric formatting
    print(f"Pi (2 decimals): {pi:.2f}");
    print(f"Pi (4 decimals): {pi:.4f}");
    print(f"Large number: {large_num:,}");
}

fn testExpressionInterpolation() {
    let x = 10;
    let y = 20;

    // Expression interpolation
    print(f"Sum: {x + y}");
    print(f"Product: {x * y}");
    print(f"Average: {(x + y) / 2}");
}

fn testObjectInterpolation() {
    let person = new Person("Bob", 25);

    // Object interpolation using toString()
    print(f"Person details: {person}");

    // Individual field interpolation
    print(f"Name: {person.name}, Age: {person.age}");
}

fn testNestedInterpolation() {
    let outer = "world";
    let inner = f"Hello, {outer}";

    // Nested string interpolation
    print(f"Nested: {inner}!");
    print(f"Double nested: {f"({inner})"}");
}

fn testArrayInterpolation() {
    let numbers = [1, 2, 3, 4, 5];
    let words = ["Hello", "World"];

    // Array interpolation
    print(f"Numbers: {numbers}");
    print(f"First word: {words[0]}, Second word: {words[1]}");
}

fn testEscaping() {
    // Testing escape sequences
    print(f"Escaped braces: {{not interpolated}}");
    print(f"Mixed escaping: {{escaped}} and {10 + 20} interpolated");
}

fn main() {
    print("=== Basic Interpolation Tests ===");
    testBasicInterpolation();

    print("\n=== Numeric Formatting Tests ===");
    testNumericFormatting();

    print("\n=== Expression Interpolation Tests ===");
    testExpressionInterpolation();

    print("\n=== Object Interpolation Tests ===");
    testObjectInterpolation();

    print("\n=== Nested Interpolation Tests ===");
    testNestedInterpolation();

    print("\n=== Array Interpolation Tests ===");
    testArrayInterpolation();

    print("\n=== Escape Sequence Tests ===");
    testEscaping();
}
