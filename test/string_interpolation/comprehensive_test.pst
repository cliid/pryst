// Basic string interpolation tests
fn test_basic_interpolation() {
    let name = "World";
    let greeting = "Hello, {name}!";
    assert(greeting == "Hello, World!");
}

// Number formatting tests
fn test_number_formatting() {
    let num = 42;
    let pi = 3.14159;

    // Integer formatting
    let int_format = "Number: {num:5d}";
    assert(int_format == "Number:    42");

    // Float formatting
    let float_format = "Pi: {pi:.2f}";
    assert(float_format == "Pi: 3.14");
}

// Multiple interpolation test
fn test_multiple_interpolation() {
    let x = 10;
    let y = 20;
    let result = "{x} + {y} = {x + y}";
    assert(result == "10 + 20 = 30");
}

// Format specifier tests
fn test_format_specifiers() {
    let num = 7;
    let price = 9.99;

    // Width and alignment
    let aligned = "{num:>3d}";
    assert(aligned == "  7");

    // Precision
    let formatted_price = "${price:.2f}";
    assert(formatted_price == "$9.99");
}

// Expression interpolation test
fn test_expression_interpolation() {
    let a = 5;
    let b = 3;
    let expr = "Result: {a * b + 2}";
    assert(expr == "Result: 17");
}

// Escape sequence test
fn test_escape_sequences() {
    let escaped = "{{escaped}} but {not_escaped}";
    let not_escaped = "interpolated";
    assert(escaped == "{escaped} but interpolated");
}

// Complex formatting test
fn test_complex_formatting() {
    let items = ["apple", "banana", "orange"];
    let prices = [1.99, 0.99, 2.49];

    for (let i = 0; i < 3; i++) {
        let line = "{items[i]:<10}: ${prices[i]:>5.2f}";
        // Check formatting with left-aligned item and right-aligned price
        if (i == 0) assert(line == "apple     : $ 1.99");
        if (i == 1) assert(line == "banana    : $ 0.99");
        if (i == 2) assert(line == "orange    : $ 2.49");
    }
}

// Main test runner
fn main() {
    test_basic_interpolation();
    test_number_formatting();
    test_multiple_interpolation();
    test_format_specifiers();
    test_expression_interpolation();
    test_escape_sequences();
    test_complex_formatting();
    print("All string interpolation tests passed!");
}
