// Test file for type registry functionality
fn test_type_conversions() -> void {
    // Test basic type declarations
    int x = 42;
    float f = 3.14;
    str s = "Hello";
    bool b = true;

    // Test explicit type conversions
    float fx = float(x);  // int to float
    str sx = str(x);      // int to string
    str sf = str(f);      // float to string
    str sb = str(b);      // bool to string

    // Test type inference
    let inferred_int = 100;
    let inferred_float = 2.718;
    let inferred_str = "World";
    let inferred_bool = false;

    // Print results to verify conversions
    print("Original values:");
    print("x: {x}, f: {f}, s: {s}, b: {b}");
    print("\nConverted values:");
    print("fx: {fx}, sx: {sx}, sf: {sf}, sb: {sb}");
    print("\nInferred values:");
    print("inferred_int: {inferred_int}");
    print("inferred_float: {inferred_float}");
    print("inferred_str: {inferred_str}");
    print("inferred_bool: {inferred_bool}");

    // Test pointer types (for LLVM 20.0.0 compatibility)
    int* ptr_int = &x;
    float* ptr_float = &f;
    print("\nPointer values:");
    print("*ptr_int: {*ptr_int}");
    print("*ptr_float: {*ptr_float}");

    // Test function types
    fn<int>(int, int) func = (int a, int b) -> int { return a + b; };
    print("\nFunction result: {func(10, 20)}");
}

fn main() -> void {
    test_type_conversions();
}
