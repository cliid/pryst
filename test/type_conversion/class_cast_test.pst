class Animal {
    str name;

    Animal(str n) {
        name = n;
    }

    str getName() {
        return name;
    }
}

class Dog extends Animal {
    Dog(str name) {
        super(name);
    }

    void bark() {
        print("Woof!");
    }
}

class StrWrapper {
    str value;

    StrWrapper(str s) {
        value = s;
    }

    StrWrapper(int i) {
        value = (str) i;
    }
}

// Test class type conversions
let dog = new Dog("Rover");
let animal = (Animal) dog;          // Should work (inheritance)
let str = (str) "Hello";           // Should work
let wrapper = StrWrapper(str);      // Constructor syntax
let intWrapper = StrWrapper(42);    // Constructor with int

// Invalid conversions that should fail
try {
    let invalidCast = (Dog) animal;  // Should fail (upcast)
} catch (TypeError e) {
    print("Caught expected type error");
}

try {
    let invalidWrapper = (StrWrapper) "test";  // Should fail (no direct cast)
} catch (TypeError e) {
    print("Caught expected type error");
}
