#pragma once
#include "logger.hpp"

// Debug macros with file and line information
#define PRYST_DEBUG(msg) \
    if (pryst::Logger::getInstance().isDebugEnabled()) { \
        pryst::Logger::getInstance().debug(msg, __FILE__, __LINE__); \
    }

// Standard logging macros
#define PRYST_INFO(msg) pryst::Logger::getInstance().info(msg)
#define PRYST_WARNING(msg) pryst::Logger::getInstance().warning(msg)
#define PRYST_ERROR(msg) pryst::Logger::getInstance().error(msg)
#define PRYST_FATAL(msg) pryst::Logger::getInstance().fatal(msg)

// Function entry/exit tracking
#define PRYST_DEBUG_FUNC_ENTRY() PRYST_DEBUG("Entering " + std::string(__FUNCTION__))
#define PRYST_DEBUG_FUNC_EXIT() PRYST_DEBUG("Exiting " + std::string(__FUNCTION__))

// Debug context macro for scoped logging
#define PRYST_DEBUG_CONTEXT(name) pryst::DebugContext debugContext(name)
