#include "diagnostic_visitor.hpp"
#include "utils/debug.hpp"
#include <sstream>

namespace pryst {

DiagnosticVisitor::DiagnosticVisitor() : currentFunction(""), inLoop(false) {}

std::any DiagnosticVisitor::visitProgram(PrystParser::ProgramContext* ctx) {
    PRYST_DEBUG("Visiting program");
    return visitChildren(ctx);
}

std::any DiagnosticVisitor::visitDeclaration(PrystParser::DeclarationContext* ctx) {
    PRYST_DEBUG("Visiting declaration");
    return visitChildren(ctx);
}

std::any DiagnosticVisitor::visitGlobalUsingDecl(PrystParser::GlobalUsingDeclContext* ctx) {
    PRYST_DEBUG("Visiting global using declaration");
    auto qualifiedId = visit(ctx->qualifiedIdentifier());
    std::string target = std::any_cast<std::string>(qualifiedId);
    return nullptr;
}

std::any DiagnosticVisitor::visitBlockScopedNamespaceDecl(PrystParser::BlockScopedNamespaceDeclContext* ctx) {
    PRYST_DEBUG("Visiting block scoped namespace declaration");
    auto qualifiedId = visit(ctx->qualifiedIdentifier());
    std::string name = std::any_cast<std::string>(qualifiedId);
    currentNamespace.push_back(name);
    auto result = visitChildren(ctx);
    currentNamespace.pop_back();
    return result;
}

std::any DiagnosticVisitor::visitBlockScopedModuleDecl(PrystParser::BlockScopedModuleDeclContext* ctx) {
    PRYST_DEBUG("Visiting block scoped module declaration");
    auto qualifiedId = visit(ctx->qualifiedIdentifier());
    std::string name = std::any_cast<std::string>(qualifiedId);
    currentModule = name;
    auto result = visitChildren(ctx);
    currentModule.clear();
    return result;
}

std::any DiagnosticVisitor::visitNamespaceDecl(PrystParser::NamespaceDeclContext* ctx) {
    PRYST_DEBUG("Visiting namespace declaration");
    auto qualifiedId = visit(ctx->qualifiedIdentifier());
    std::string name = std::any_cast<std::string>(qualifiedId);
    currentNamespace.push_back(name);
    auto result = visitChildren(ctx);
    currentNamespace.pop_back();
    return result;
}

std::any DiagnosticVisitor::visitModuleDecl(PrystParser::ModuleDeclContext* ctx) {
    PRYST_DEBUG("Visiting module declaration");
    auto qualifiedId = visit(ctx->qualifiedIdentifier());
    std::string name = std::any_cast<std::string>(qualifiedId);
    currentModule = name;
    auto result = visitChildren(ctx);
    currentModule.clear();
    return result;
}

std::any DiagnosticVisitor::visitImportDecl(PrystParser::ImportDeclContext* ctx) {
    PRYST_DEBUG("Visiting import declaration");
    return visitChildren(ctx);
}

std::any DiagnosticVisitor::visitImportPath(PrystParser::ImportPathContext* ctx) {
    PRYST_DEBUG("Visiting import path");
    std::string path;
    for (auto id : ctx->IDENTIFIER()) {
        if (!path.empty()) path += "::";
        path += id->getText();
    }
    return path;
}

std::any DiagnosticVisitor::visitQualifiedIdentifier(PrystParser::QualifiedIdentifierContext* ctx) {
    PRYST_DEBUG("Visiting qualified identifier");
    std::string identifier;
    for (auto id : ctx->IDENTIFIER()) {
        if (!identifier.empty()) identifier += "::";
        identifier += id->getText();
    }
    return identifier;
}

void DiagnosticVisitor::reportError(antlr4::ParserRuleContext* ctx, const std::string& message) {
    std::string location = getSourceLocation(ctx);
    PRYST_ERROR(location + ": " + message);
}

void DiagnosticVisitor::reportWarning(antlr4::ParserRuleContext* ctx, const std::string& message) {
    std::string location = getSourceLocation(ctx);
    PRYST_DEBUG(location + ": Warning: " + message);
}

std::string DiagnosticVisitor::getSourceLocation(antlr4::ParserRuleContext* ctx) {
    auto start = ctx->getStart();
    std::stringstream ss;
    ss << "Line " << start->getLine() << ":" << start->getCharPositionInLine();
    return ss.str();
}

// ... Continue implementing other visitor methods following the same pattern ...

} // namespace pryst
