
// Generated from Pryst.g4 by ANTLR 4.13.2


#include "PrystLexer.h"


using namespace antlr4;



using namespace antlr4;

namespace {

struct PrystLexerStaticData final {
  PrystLexerStaticData(std::vector<std::string> ruleNames,
                          std::vector<std::string> channelNames,
                          std::vector<std::string> modeNames,
                          std::vector<std::string> literalNames,
                          std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), channelNames(std::move(channelNames)),
        modeNames(std::move(modeNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  PrystLexerStaticData(const PrystLexerStaticData&) = delete;
  PrystLexerStaticData(PrystLexerStaticData&&) = delete;
  PrystLexerStaticData& operator=(const PrystLexerStaticData&) = delete;
  PrystLexerStaticData& operator=(PrystLexerStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> channelNames;
  const std::vector<std::string> modeNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag prystlexerLexerOnceFlag;
#if ANTLR4_USE_THREAD_LOCAL_CACHE
static thread_local
#endif
std::unique_ptr<PrystLexerStaticData> prystlexerLexerStaticData = nullptr;

void prystlexerLexerInitialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  if (prystlexerLexerStaticData != nullptr) {
    return;
  }
#else
  assert(prystlexerLexerStaticData == nullptr);
#endif
  auto staticData = std::make_unique<PrystLexerStaticData>(
    std::vector<std::string>{
      "LPAREN", "RPAREN", "LBRACE", "RBRACE", "LBRACKET", "RBRACKET", "COMMA", 
      "DOT", "MINUS", "PLUS", "SEMICOLON", "SLASH", "STAR", "BANG", "EQUAL", 
      "GREATER", "LESS", "NOT_EQUAL", "EQUAL_EQUAL", "GREATER_EQUAL", "LESS_EQUAL", 
      "AND", "OR", "INCREMENT", "DECREMENT", "PERCENT", "ARROW", "DOUBLE_COLON", 
      "PRINT", "CLASS", "EXTENDS", "ELSE", "FALSE", "FOR", "IF", "NULL", 
      "RETURN", "SUPER", "THIS", "TRUE", "WHILE", "NEW", "CONVERT", "NAMESPACE", 
      "MODULE", "IMPORT", "USING", "LET", "FN", "CONST", "CONST_EXPR", "TRY", 
      "CATCH", "INT", "FLOAT", "BOOL", "STR", "VOID", "NUMBER", "STRING", 
      "ESCAPE_SEQ", "INTERP_EXPR", "StringCharacter", "HexDigit", "IDENTIFIER", 
      "COMMENT", "WS"
    },
    std::vector<std::string>{
      "DEFAULT_TOKEN_CHANNEL", "HIDDEN"
    },
    std::vector<std::string>{
      "DEFAULT_MODE"
    },
    std::vector<std::string>{
      "", "'('", "')'", "'{'", "'}'", "'['", "']'", "','", "'.'", "'-'", 
      "'+'", "';'", "'/'", "'*'", "'!'", "'='", "'>'", "'<'", "'!='", "'=='", 
      "'>='", "'<='", "'&&'", "'||'", "'++'", "'--'", "'%'", "'->'", "'::'", 
      "'print'", "'class'", "'extends'", "'else'", "'false'", "'for'", "'if'", 
      "'null'", "'return'", "'super'", "'this'", "'true'", "'while'", "'new'", 
      "'convert'", "'namespace'", "'module'", "'import'", "'using'", "'let'", 
      "'fn'", "'const'", "'const!'", "'try'", "'catch'", "'int'", "'float'", 
      "'bool'", "'str'", "'void'"
    },
    std::vector<std::string>{
      "", "LPAREN", "RPAREN", "LBRACE", "RBRACE", "LBRACKET", "RBRACKET", 
      "COMMA", "DOT", "MINUS", "PLUS", "SEMICOLON", "SLASH", "STAR", "BANG", 
      "EQUAL", "GREATER", "LESS", "NOT_EQUAL", "EQUAL_EQUAL", "GREATER_EQUAL", 
      "LESS_EQUAL", "AND", "OR", "INCREMENT", "DECREMENT", "PERCENT", "ARROW", 
      "DOUBLE_COLON", "PRINT", "CLASS", "EXTENDS", "ELSE", "FALSE", "FOR", 
      "IF", "NULL", "RETURN", "SUPER", "THIS", "TRUE", "WHILE", "NEW", "CONVERT", 
      "NAMESPACE", "MODULE", "IMPORT", "USING", "LET", "FN", "CONST", "CONST_EXPR", 
      "TRY", "CATCH", "INT", "FLOAT", "BOOL", "STR", "VOID", "NUMBER", "STRING", 
      "IDENTIFIER", "COMMENT", "WS"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,0,63,456,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
  	6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
  	7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
  	7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
  	7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
  	7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
  	7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
  	7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
  	7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,
  	7,63,2,64,7,64,2,65,7,65,2,66,7,66,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,
  	4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,12,
  	1,12,1,13,1,13,1,14,1,14,1,15,1,15,1,16,1,16,1,17,1,17,1,17,1,18,1,18,
  	1,18,1,19,1,19,1,19,1,20,1,20,1,20,1,21,1,21,1,21,1,22,1,22,1,22,1,23,
  	1,23,1,23,1,24,1,24,1,24,1,25,1,25,1,26,1,26,1,26,1,27,1,27,1,27,1,28,
  	1,28,1,28,1,28,1,28,1,28,1,29,1,29,1,29,1,29,1,29,1,29,1,30,1,30,1,30,
  	1,30,1,30,1,30,1,30,1,30,1,31,1,31,1,31,1,31,1,31,1,32,1,32,1,32,1,32,
  	1,32,1,32,1,33,1,33,1,33,1,33,1,34,1,34,1,34,1,35,1,35,1,35,1,35,1,35,
  	1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,37,1,37,1,37,1,37,1,37,1,37,1,38,
  	1,38,1,38,1,38,1,38,1,39,1,39,1,39,1,39,1,39,1,40,1,40,1,40,1,40,1,40,
  	1,40,1,41,1,41,1,41,1,41,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,43,
  	1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,44,1,44,1,44,1,44,1,44,
  	1,44,1,44,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,46,1,46,1,46,1,46,1,46,
  	1,46,1,47,1,47,1,47,1,47,1,48,1,48,1,48,1,49,1,49,1,49,1,49,1,49,1,49,
  	1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,51,1,51,1,51,1,51,1,52,1,52,1,52,
  	1,52,1,52,1,52,1,53,1,53,1,53,1,53,1,54,1,54,1,54,1,54,1,54,1,54,1,55,
  	1,55,1,55,1,55,1,55,1,56,1,56,1,56,1,56,1,57,1,57,1,57,1,57,1,57,1,58,
  	4,58,371,8,58,11,58,12,58,372,1,58,1,58,4,58,377,8,58,11,58,12,58,378,
  	3,58,381,8,58,1,59,1,59,1,59,1,59,5,59,387,8,59,10,59,12,59,390,9,59,
  	1,59,1,59,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,3,60,404,
  	8,60,1,61,1,61,1,61,1,61,5,61,410,8,61,10,61,12,61,413,9,61,1,61,1,61,
  	1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,3,62,428,8,62,
  	1,63,1,63,1,64,1,64,5,64,434,8,64,10,64,12,64,437,9,64,1,65,1,65,1,65,
  	1,65,5,65,443,8,65,10,65,12,65,446,9,65,1,65,1,65,1,66,4,66,451,8,66,
  	11,66,12,66,452,1,66,1,66,1,411,0,67,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,
  	8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,
  	20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,
  	63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,81,41,83,42,85,
  	43,87,44,89,45,91,46,93,47,95,48,97,49,99,50,101,51,103,52,105,53,107,
  	54,109,55,111,56,113,57,115,58,117,59,119,60,121,0,123,0,125,0,127,0,
  	129,61,131,62,133,63,1,0,9,1,0,48,57,6,0,10,10,13,13,34,34,36,36,92,92,
  	123,123,8,0,34,34,39,39,92,92,98,98,102,102,110,110,114,114,116,116,5,
  	0,10,10,13,13,34,34,36,36,92,92,3,0,48,57,65,70,97,102,3,0,65,90,95,95,
  	97,122,4,0,48,57,65,90,95,95,97,122,2,0,10,10,13,13,3,0,9,10,13,13,32,
  	32,464,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,
  	11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,
  	0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,
  	0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,
  	43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,
  	0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,
  	0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,
  	75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,
  	0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,
  	0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,1,0,0,0,0,103,1,0,0,0,0,105,1,0,0,0,
  	0,107,1,0,0,0,0,109,1,0,0,0,0,111,1,0,0,0,0,113,1,0,0,0,0,115,1,0,0,0,
  	0,117,1,0,0,0,0,119,1,0,0,0,0,129,1,0,0,0,0,131,1,0,0,0,0,133,1,0,0,0,
  	1,135,1,0,0,0,3,137,1,0,0,0,5,139,1,0,0,0,7,141,1,0,0,0,9,143,1,0,0,0,
  	11,145,1,0,0,0,13,147,1,0,0,0,15,149,1,0,0,0,17,151,1,0,0,0,19,153,1,
  	0,0,0,21,155,1,0,0,0,23,157,1,0,0,0,25,159,1,0,0,0,27,161,1,0,0,0,29,
  	163,1,0,0,0,31,165,1,0,0,0,33,167,1,0,0,0,35,169,1,0,0,0,37,172,1,0,0,
  	0,39,175,1,0,0,0,41,178,1,0,0,0,43,181,1,0,0,0,45,184,1,0,0,0,47,187,
  	1,0,0,0,49,190,1,0,0,0,51,193,1,0,0,0,53,195,1,0,0,0,55,198,1,0,0,0,57,
  	201,1,0,0,0,59,207,1,0,0,0,61,213,1,0,0,0,63,221,1,0,0,0,65,226,1,0,0,
  	0,67,232,1,0,0,0,69,236,1,0,0,0,71,239,1,0,0,0,73,244,1,0,0,0,75,251,
  	1,0,0,0,77,257,1,0,0,0,79,262,1,0,0,0,81,267,1,0,0,0,83,273,1,0,0,0,85,
  	277,1,0,0,0,87,285,1,0,0,0,89,295,1,0,0,0,91,302,1,0,0,0,93,309,1,0,0,
  	0,95,315,1,0,0,0,97,319,1,0,0,0,99,322,1,0,0,0,101,328,1,0,0,0,103,335,
  	1,0,0,0,105,339,1,0,0,0,107,345,1,0,0,0,109,349,1,0,0,0,111,355,1,0,0,
  	0,113,360,1,0,0,0,115,364,1,0,0,0,117,370,1,0,0,0,119,382,1,0,0,0,121,
  	403,1,0,0,0,123,405,1,0,0,0,125,427,1,0,0,0,127,429,1,0,0,0,129,431,1,
  	0,0,0,131,438,1,0,0,0,133,450,1,0,0,0,135,136,5,40,0,0,136,2,1,0,0,0,
  	137,138,5,41,0,0,138,4,1,0,0,0,139,140,5,123,0,0,140,6,1,0,0,0,141,142,
  	5,125,0,0,142,8,1,0,0,0,143,144,5,91,0,0,144,10,1,0,0,0,145,146,5,93,
  	0,0,146,12,1,0,0,0,147,148,5,44,0,0,148,14,1,0,0,0,149,150,5,46,0,0,150,
  	16,1,0,0,0,151,152,5,45,0,0,152,18,1,0,0,0,153,154,5,43,0,0,154,20,1,
  	0,0,0,155,156,5,59,0,0,156,22,1,0,0,0,157,158,5,47,0,0,158,24,1,0,0,0,
  	159,160,5,42,0,0,160,26,1,0,0,0,161,162,5,33,0,0,162,28,1,0,0,0,163,164,
  	5,61,0,0,164,30,1,0,0,0,165,166,5,62,0,0,166,32,1,0,0,0,167,168,5,60,
  	0,0,168,34,1,0,0,0,169,170,5,33,0,0,170,171,5,61,0,0,171,36,1,0,0,0,172,
  	173,5,61,0,0,173,174,5,61,0,0,174,38,1,0,0,0,175,176,5,62,0,0,176,177,
  	5,61,0,0,177,40,1,0,0,0,178,179,5,60,0,0,179,180,5,61,0,0,180,42,1,0,
  	0,0,181,182,5,38,0,0,182,183,5,38,0,0,183,44,1,0,0,0,184,185,5,124,0,
  	0,185,186,5,124,0,0,186,46,1,0,0,0,187,188,5,43,0,0,188,189,5,43,0,0,
  	189,48,1,0,0,0,190,191,5,45,0,0,191,192,5,45,0,0,192,50,1,0,0,0,193,194,
  	5,37,0,0,194,52,1,0,0,0,195,196,5,45,0,0,196,197,5,62,0,0,197,54,1,0,
  	0,0,198,199,5,58,0,0,199,200,5,58,0,0,200,56,1,0,0,0,201,202,5,112,0,
  	0,202,203,5,114,0,0,203,204,5,105,0,0,204,205,5,110,0,0,205,206,5,116,
  	0,0,206,58,1,0,0,0,207,208,5,99,0,0,208,209,5,108,0,0,209,210,5,97,0,
  	0,210,211,5,115,0,0,211,212,5,115,0,0,212,60,1,0,0,0,213,214,5,101,0,
  	0,214,215,5,120,0,0,215,216,5,116,0,0,216,217,5,101,0,0,217,218,5,110,
  	0,0,218,219,5,100,0,0,219,220,5,115,0,0,220,62,1,0,0,0,221,222,5,101,
  	0,0,222,223,5,108,0,0,223,224,5,115,0,0,224,225,5,101,0,0,225,64,1,0,
  	0,0,226,227,5,102,0,0,227,228,5,97,0,0,228,229,5,108,0,0,229,230,5,115,
  	0,0,230,231,5,101,0,0,231,66,1,0,0,0,232,233,5,102,0,0,233,234,5,111,
  	0,0,234,235,5,114,0,0,235,68,1,0,0,0,236,237,5,105,0,0,237,238,5,102,
  	0,0,238,70,1,0,0,0,239,240,5,110,0,0,240,241,5,117,0,0,241,242,5,108,
  	0,0,242,243,5,108,0,0,243,72,1,0,0,0,244,245,5,114,0,0,245,246,5,101,
  	0,0,246,247,5,116,0,0,247,248,5,117,0,0,248,249,5,114,0,0,249,250,5,110,
  	0,0,250,74,1,0,0,0,251,252,5,115,0,0,252,253,5,117,0,0,253,254,5,112,
  	0,0,254,255,5,101,0,0,255,256,5,114,0,0,256,76,1,0,0,0,257,258,5,116,
  	0,0,258,259,5,104,0,0,259,260,5,105,0,0,260,261,5,115,0,0,261,78,1,0,
  	0,0,262,263,5,116,0,0,263,264,5,114,0,0,264,265,5,117,0,0,265,266,5,101,
  	0,0,266,80,1,0,0,0,267,268,5,119,0,0,268,269,5,104,0,0,269,270,5,105,
  	0,0,270,271,5,108,0,0,271,272,5,101,0,0,272,82,1,0,0,0,273,274,5,110,
  	0,0,274,275,5,101,0,0,275,276,5,119,0,0,276,84,1,0,0,0,277,278,5,99,0,
  	0,278,279,5,111,0,0,279,280,5,110,0,0,280,281,5,118,0,0,281,282,5,101,
  	0,0,282,283,5,114,0,0,283,284,5,116,0,0,284,86,1,0,0,0,285,286,5,110,
  	0,0,286,287,5,97,0,0,287,288,5,109,0,0,288,289,5,101,0,0,289,290,5,115,
  	0,0,290,291,5,112,0,0,291,292,5,97,0,0,292,293,5,99,0,0,293,294,5,101,
  	0,0,294,88,1,0,0,0,295,296,5,109,0,0,296,297,5,111,0,0,297,298,5,100,
  	0,0,298,299,5,117,0,0,299,300,5,108,0,0,300,301,5,101,0,0,301,90,1,0,
  	0,0,302,303,5,105,0,0,303,304,5,109,0,0,304,305,5,112,0,0,305,306,5,111,
  	0,0,306,307,5,114,0,0,307,308,5,116,0,0,308,92,1,0,0,0,309,310,5,117,
  	0,0,310,311,5,115,0,0,311,312,5,105,0,0,312,313,5,110,0,0,313,314,5,103,
  	0,0,314,94,1,0,0,0,315,316,5,108,0,0,316,317,5,101,0,0,317,318,5,116,
  	0,0,318,96,1,0,0,0,319,320,5,102,0,0,320,321,5,110,0,0,321,98,1,0,0,0,
  	322,323,5,99,0,0,323,324,5,111,0,0,324,325,5,110,0,0,325,326,5,115,0,
  	0,326,327,5,116,0,0,327,100,1,0,0,0,328,329,5,99,0,0,329,330,5,111,0,
  	0,330,331,5,110,0,0,331,332,5,115,0,0,332,333,5,116,0,0,333,334,5,33,
  	0,0,334,102,1,0,0,0,335,336,5,116,0,0,336,337,5,114,0,0,337,338,5,121,
  	0,0,338,104,1,0,0,0,339,340,5,99,0,0,340,341,5,97,0,0,341,342,5,116,0,
  	0,342,343,5,99,0,0,343,344,5,104,0,0,344,106,1,0,0,0,345,346,5,105,0,
  	0,346,347,5,110,0,0,347,348,5,116,0,0,348,108,1,0,0,0,349,350,5,102,0,
  	0,350,351,5,108,0,0,351,352,5,111,0,0,352,353,5,97,0,0,353,354,5,116,
  	0,0,354,110,1,0,0,0,355,356,5,98,0,0,356,357,5,111,0,0,357,358,5,111,
  	0,0,358,359,5,108,0,0,359,112,1,0,0,0,360,361,5,115,0,0,361,362,5,116,
  	0,0,362,363,5,114,0,0,363,114,1,0,0,0,364,365,5,118,0,0,365,366,5,111,
  	0,0,366,367,5,105,0,0,367,368,5,100,0,0,368,116,1,0,0,0,369,371,7,0,0,
  	0,370,369,1,0,0,0,371,372,1,0,0,0,372,370,1,0,0,0,372,373,1,0,0,0,373,
  	380,1,0,0,0,374,376,5,46,0,0,375,377,7,0,0,0,376,375,1,0,0,0,377,378,
  	1,0,0,0,378,376,1,0,0,0,378,379,1,0,0,0,379,381,1,0,0,0,380,374,1,0,0,
  	0,380,381,1,0,0,0,381,118,1,0,0,0,382,388,5,34,0,0,383,387,8,1,0,0,384,
  	387,3,121,60,0,385,387,3,123,61,0,386,383,1,0,0,0,386,384,1,0,0,0,386,
  	385,1,0,0,0,387,390,1,0,0,0,388,386,1,0,0,0,388,389,1,0,0,0,389,391,1,
  	0,0,0,390,388,1,0,0,0,391,392,5,34,0,0,392,120,1,0,0,0,393,394,5,92,0,
  	0,394,404,7,2,0,0,395,396,5,92,0,0,396,397,5,117,0,0,397,398,1,0,0,0,
  	398,399,3,127,63,0,399,400,3,127,63,0,400,401,3,127,63,0,401,402,3,127,
  	63,0,402,404,1,0,0,0,403,393,1,0,0,0,403,395,1,0,0,0,404,122,1,0,0,0,
  	405,406,5,36,0,0,406,407,5,123,0,0,407,411,1,0,0,0,408,410,9,0,0,0,409,
  	408,1,0,0,0,410,413,1,0,0,0,411,412,1,0,0,0,411,409,1,0,0,0,412,414,1,
  	0,0,0,413,411,1,0,0,0,414,415,5,125,0,0,415,124,1,0,0,0,416,428,8,3,0,
  	0,417,418,5,92,0,0,418,428,7,2,0,0,419,420,5,92,0,0,420,421,5,117,0,0,
  	421,422,1,0,0,0,422,423,3,127,63,0,423,424,3,127,63,0,424,425,3,127,63,
  	0,425,426,3,127,63,0,426,428,1,0,0,0,427,416,1,0,0,0,427,417,1,0,0,0,
  	427,419,1,0,0,0,428,126,1,0,0,0,429,430,7,4,0,0,430,128,1,0,0,0,431,435,
  	7,5,0,0,432,434,7,6,0,0,433,432,1,0,0,0,434,437,1,0,0,0,435,433,1,0,0,
  	0,435,436,1,0,0,0,436,130,1,0,0,0,437,435,1,0,0,0,438,439,5,47,0,0,439,
  	440,5,47,0,0,440,444,1,0,0,0,441,443,8,7,0,0,442,441,1,0,0,0,443,446,
  	1,0,0,0,444,442,1,0,0,0,444,445,1,0,0,0,445,447,1,0,0,0,446,444,1,0,0,
  	0,447,448,6,65,0,0,448,132,1,0,0,0,449,451,7,8,0,0,450,449,1,0,0,0,451,
  	452,1,0,0,0,452,450,1,0,0,0,452,453,1,0,0,0,453,454,1,0,0,0,454,455,6,
  	66,0,0,455,134,1,0,0,0,12,0,372,378,380,386,388,403,411,427,435,444,452,
  	1,6,0,0
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  prystlexerLexerStaticData = std::move(staticData);
}

}

PrystLexer::PrystLexer(CharStream *input) : Lexer(input) {
  PrystLexer::initialize();
  _interpreter = new atn::LexerATNSimulator(this, *prystlexerLexerStaticData->atn, prystlexerLexerStaticData->decisionToDFA, prystlexerLexerStaticData->sharedContextCache);
}

PrystLexer::~PrystLexer() {
  delete _interpreter;
}

std::string PrystLexer::getGrammarFileName() const {
  return "Pryst.g4";
}

const std::vector<std::string>& PrystLexer::getRuleNames() const {
  return prystlexerLexerStaticData->ruleNames;
}

const std::vector<std::string>& PrystLexer::getChannelNames() const {
  return prystlexerLexerStaticData->channelNames;
}

const std::vector<std::string>& PrystLexer::getModeNames() const {
  return prystlexerLexerStaticData->modeNames;
}

const dfa::Vocabulary& PrystLexer::getVocabulary() const {
  return prystlexerLexerStaticData->vocabulary;
}

antlr4::atn::SerializedATNView PrystLexer::getSerializedATN() const {
  return prystlexerLexerStaticData->serializedATN;
}

const atn::ATN& PrystLexer::getATN() const {
  return *prystlexerLexerStaticData->atn;
}




void PrystLexer::initialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  prystlexerLexerInitialize();
#else
  ::antlr4::internal::call_once(prystlexerLexerOnceFlag, prystlexerLexerInitialize);
#endif
}
