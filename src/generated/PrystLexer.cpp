
// Generated from PrystLexer.g4 by ANTLR 4.13.2


#include "PrystLexer.h"


using namespace antlr4;



using namespace antlr4;

namespace {

struct PrystLexerStaticData final {
  PrystLexerStaticData(std::vector<std::string> ruleNames,
                          std::vector<std::string> channelNames,
                          std::vector<std::string> modeNames,
                          std::vector<std::string> literalNames,
                          std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), channelNames(std::move(channelNames)),
        modeNames(std::move(modeNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  PrystLexerStaticData(const PrystLexerStaticData&) = delete;
  PrystLexerStaticData(PrystLexerStaticData&&) = delete;
  PrystLexerStaticData& operator=(const PrystLexerStaticData&) = delete;
  PrystLexerStaticData& operator=(PrystLexerStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> channelNames;
  const std::vector<std::string> modeNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag prystlexerLexerOnceFlag;
#if ANTLR4_USE_THREAD_LOCAL_CACHE
static thread_local
#endif
std::unique_ptr<PrystLexerStaticData> prystlexerLexerStaticData = nullptr;

void prystlexerLexerInitialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  if (prystlexerLexerStaticData != nullptr) {
    return;
  }
#else
  assert(prystlexerLexerStaticData == nullptr);
#endif
  auto staticData = std::make_unique<PrystLexerStaticData>(
    std::vector<std::string>{
      "PRINT", "CLASS", "EXTENDS", "ELSE", "FALSE", "FOR", "IF", "NULL", 
      "RETURN", "SUPER", "THIS", "TRUE", "WHILE", "NEW", "CONVERT", "NAMESPACE", 
      "MODULE", "IMPORT", "USING", "LET", "FN", "CONST", "CONST_EXPR", "TRY", 
      "CATCH", "INT_TYPE", "FLOAT_TYPE", "BOOL_TYPE", "STR_TYPE", "VOID_TYPE", 
      "LPAREN", "RPAREN", "LBRACE", "RBRACE", "LBRACKET", "RBRACKET", "COMMA", 
      "DOT", "MINUS", "PLUS", "SEMICOLON", "SLASH", "STAR", "BANG", "EQUAL", 
      "LESS", "GREATER", "NOT_EQUAL", "EQUAL_EQUAL", "GREATER_EQUAL", "LESS_EQUAL", 
      "AND", "OR", "INCREMENT", "DECREMENT", "PERCENT", "ARROW", "DOUBLE_COLON", 
      "DIGIT", "LETTER", "IDENTIFIER_START", "IDENTIFIER_PART", "NUMBER", 
      "IDENTIFIER", "STRING", "STRING_START", "COMMENT", "WS", "STRING_CONTENT", 
      "ESCAPE_SEQ", "INTERP_START", "INTERP_END", "STRING_END"
    },
    std::vector<std::string>{
      "DEFAULT_TOKEN_CHANNEL", "HIDDEN"
    },
    std::vector<std::string>{
      "DEFAULT_MODE", "IN_STRING"
    },
    std::vector<std::string>{
      "", "'print'", "'class'", "'extends'", "'else'", "'false'", "'for'", 
      "'if'", "'null'", "'return'", "'super'", "'this'", "'true'", "'while'", 
      "'new'", "'convert'", "'namespace'", "'module'", "'import'", "'using'", 
      "'let'", "'fn'", "'const'", "'const!'", "'try'", "'catch'", "'int'", 
      "'float'", "'bool'", "'str'", "'void'", "'('", "')'", "'{'", "", "'['", 
      "']'", "','", "'.'", "'-'", "'+'", "';'", "'/'", "'*'", "'!'", "'='", 
      "'<'", "'>'", "'!='", "'=='", "'>='", "'<='", "'&&'", "'||'", "'++'", 
      "'--'", "'%'", "'->'", "'::'", "", "", "", "", "", "", "", "", "'${'"
    },
    std::vector<std::string>{
      "", "PRINT", "CLASS", "EXTENDS", "ELSE", "FALSE", "FOR", "IF", "NULL", 
      "RETURN", "SUPER", "THIS", "TRUE", "WHILE", "NEW", "CONVERT", "NAMESPACE", 
      "MODULE", "IMPORT", "USING", "LET", "FN", "CONST", "CONST_EXPR", "TRY", 
      "CATCH", "INT_TYPE", "FLOAT_TYPE", "BOOL_TYPE", "STR_TYPE", "VOID_TYPE", 
      "LPAREN", "RPAREN", "LBRACE", "RBRACE", "LBRACKET", "RBRACKET", "COMMA", 
      "DOT", "MINUS", "PLUS", "SEMICOLON", "SLASH", "STAR", "BANG", "EQUAL", 
      "LESS", "GREATER", "NOT_EQUAL", "EQUAL_EQUAL", "GREATER_EQUAL", "LESS_EQUAL", 
      "AND", "OR", "INCREMENT", "DECREMENT", "PERCENT", "ARROW", "DOUBLE_COLON", 
      "NUMBER", "IDENTIFIER", "STRING", "STRING_START", "COMMENT", "WS", 
      "STRING_CONTENT", "ESCAPE_SEQ", "INTERP_START", "INTERP_END", "STRING_END"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,0,69,473,6,-1,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
  	2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
  	13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,
  	20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,
  	27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,
  	34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,
  	41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,
  	48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,
  	55,2,56,7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,
  	62,2,63,7,63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,
  	69,2,70,7,70,2,71,7,71,2,72,7,72,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,
  	1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,4,1,
  	4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,8,
  	1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,
  	10,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,
  	13,1,13,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,
  	15,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,17,1,
  	17,1,17,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,18,1,19,1,19,1,
  	19,1,19,1,20,1,20,1,20,1,21,1,21,1,21,1,21,1,21,1,21,1,22,1,22,1,22,1,
  	22,1,22,1,22,1,22,1,23,1,23,1,23,1,23,1,24,1,24,1,24,1,24,1,24,1,24,1,
  	25,1,25,1,25,1,25,1,26,1,26,1,26,1,26,1,26,1,26,1,27,1,27,1,27,1,27,1,
  	27,1,28,1,28,1,28,1,28,1,29,1,29,1,29,1,29,1,29,1,30,1,30,1,31,1,31,1,
  	32,1,32,1,33,1,33,1,34,1,34,1,35,1,35,1,36,1,36,1,37,1,37,1,38,1,38,1,
  	39,1,39,1,40,1,40,1,41,1,41,1,42,1,42,1,43,1,43,1,44,1,44,1,45,1,45,1,
  	46,1,46,1,47,1,47,1,47,1,48,1,48,1,48,1,49,1,49,1,49,1,50,1,50,1,50,1,
  	51,1,51,1,51,1,52,1,52,1,52,1,53,1,53,1,53,1,54,1,54,1,54,1,55,1,55,1,
  	56,1,56,1,56,1,57,1,57,1,57,1,58,1,58,1,59,1,59,1,60,1,60,3,60,389,8,
  	60,1,61,1,61,1,61,3,61,394,8,61,1,62,4,62,397,8,62,11,62,12,62,398,1,
  	62,1,62,4,62,403,8,62,11,62,12,62,404,3,62,407,8,62,1,63,1,63,5,63,411,
  	8,63,10,63,12,63,414,9,63,1,64,1,64,5,64,418,8,64,10,64,12,64,421,9,64,
  	1,64,1,64,1,65,1,65,1,65,1,65,1,66,1,66,1,66,1,66,5,66,433,8,66,10,66,
  	12,66,436,9,66,1,66,1,66,1,67,4,67,441,8,67,11,67,12,67,442,1,67,1,67,
  	1,68,4,68,448,8,68,11,68,12,68,449,1,69,1,69,1,69,1,69,1,69,1,69,1,69,
  	3,69,459,8,69,1,70,1,70,1,70,1,70,1,70,1,71,1,71,1,71,1,71,1,72,1,72,
  	1,72,1,72,0,0,73,2,1,4,2,6,3,8,4,10,5,12,6,14,7,16,8,18,9,20,10,22,11,
  	24,12,26,13,28,14,30,15,32,16,34,17,36,18,38,19,40,20,42,21,44,22,46,
  	23,48,24,50,25,52,26,54,27,56,28,58,29,60,30,62,31,64,32,66,33,68,34,
  	70,35,72,36,74,37,76,38,78,39,80,40,82,41,84,42,86,43,88,44,90,45,92,
  	46,94,47,96,48,98,49,100,50,102,51,104,52,106,53,108,54,110,55,112,56,
  	114,57,116,58,118,0,120,0,122,0,124,0,126,59,128,60,130,61,132,62,134,
  	63,136,64,138,65,140,66,142,67,144,68,146,69,2,0,1,8,1,0,48,57,2,0,65,
  	90,97,122,3,0,10,10,13,13,34,34,2,0,10,10,13,13,3,0,9,10,13,13,32,32,
  	6,0,10,10,13,13,34,34,36,36,92,92,123,123,8,0,34,34,39,39,92,92,98,98,
  	102,102,110,110,114,114,116,116,3,0,48,57,65,70,97,102,479,0,2,1,0,0,
  	0,0,4,1,0,0,0,0,6,1,0,0,0,0,8,1,0,0,0,0,10,1,0,0,0,0,12,1,0,0,0,0,14,
  	1,0,0,0,0,16,1,0,0,0,0,18,1,0,0,0,0,20,1,0,0,0,0,22,1,0,0,0,0,24,1,0,
  	0,0,0,26,1,0,0,0,0,28,1,0,0,0,0,30,1,0,0,0,0,32,1,0,0,0,0,34,1,0,0,0,
  	0,36,1,0,0,0,0,38,1,0,0,0,0,40,1,0,0,0,0,42,1,0,0,0,0,44,1,0,0,0,0,46,
  	1,0,0,0,0,48,1,0,0,0,0,50,1,0,0,0,0,52,1,0,0,0,0,54,1,0,0,0,0,56,1,0,
  	0,0,0,58,1,0,0,0,0,60,1,0,0,0,0,62,1,0,0,0,0,64,1,0,0,0,0,66,1,0,0,0,
  	0,68,1,0,0,0,0,70,1,0,0,0,0,72,1,0,0,0,0,74,1,0,0,0,0,76,1,0,0,0,0,78,
  	1,0,0,0,0,80,1,0,0,0,0,82,1,0,0,0,0,84,1,0,0,0,0,86,1,0,0,0,0,88,1,0,
  	0,0,0,90,1,0,0,0,0,92,1,0,0,0,0,94,1,0,0,0,0,96,1,0,0,0,0,98,1,0,0,0,
  	0,100,1,0,0,0,0,102,1,0,0,0,0,104,1,0,0,0,0,106,1,0,0,0,0,108,1,0,0,0,
  	0,110,1,0,0,0,0,112,1,0,0,0,0,114,1,0,0,0,0,116,1,0,0,0,0,126,1,0,0,0,
  	0,128,1,0,0,0,0,130,1,0,0,0,0,132,1,0,0,0,0,134,1,0,0,0,0,136,1,0,0,0,
  	1,138,1,0,0,0,1,140,1,0,0,0,1,142,1,0,0,0,1,144,1,0,0,0,1,146,1,0,0,0,
  	2,148,1,0,0,0,4,154,1,0,0,0,6,160,1,0,0,0,8,168,1,0,0,0,10,173,1,0,0,
  	0,12,179,1,0,0,0,14,183,1,0,0,0,16,186,1,0,0,0,18,191,1,0,0,0,20,198,
  	1,0,0,0,22,204,1,0,0,0,24,209,1,0,0,0,26,214,1,0,0,0,28,220,1,0,0,0,30,
  	224,1,0,0,0,32,232,1,0,0,0,34,242,1,0,0,0,36,249,1,0,0,0,38,256,1,0,0,
  	0,40,262,1,0,0,0,42,266,1,0,0,0,44,269,1,0,0,0,46,275,1,0,0,0,48,282,
  	1,0,0,0,50,286,1,0,0,0,52,292,1,0,0,0,54,296,1,0,0,0,56,302,1,0,0,0,58,
  	307,1,0,0,0,60,311,1,0,0,0,62,316,1,0,0,0,64,318,1,0,0,0,66,320,1,0,0,
  	0,68,322,1,0,0,0,70,324,1,0,0,0,72,326,1,0,0,0,74,328,1,0,0,0,76,330,
  	1,0,0,0,78,332,1,0,0,0,80,334,1,0,0,0,82,336,1,0,0,0,84,338,1,0,0,0,86,
  	340,1,0,0,0,88,342,1,0,0,0,90,344,1,0,0,0,92,346,1,0,0,0,94,348,1,0,0,
  	0,96,350,1,0,0,0,98,353,1,0,0,0,100,356,1,0,0,0,102,359,1,0,0,0,104,362,
  	1,0,0,0,106,365,1,0,0,0,108,368,1,0,0,0,110,371,1,0,0,0,112,374,1,0,0,
  	0,114,376,1,0,0,0,116,379,1,0,0,0,118,382,1,0,0,0,120,384,1,0,0,0,122,
  	388,1,0,0,0,124,393,1,0,0,0,126,396,1,0,0,0,128,408,1,0,0,0,130,415,1,
  	0,0,0,132,424,1,0,0,0,134,428,1,0,0,0,136,440,1,0,0,0,138,447,1,0,0,0,
  	140,458,1,0,0,0,142,460,1,0,0,0,144,465,1,0,0,0,146,469,1,0,0,0,148,149,
  	5,112,0,0,149,150,5,114,0,0,150,151,5,105,0,0,151,152,5,110,0,0,152,153,
  	5,116,0,0,153,3,1,0,0,0,154,155,5,99,0,0,155,156,5,108,0,0,156,157,5,
  	97,0,0,157,158,5,115,0,0,158,159,5,115,0,0,159,5,1,0,0,0,160,161,5,101,
  	0,0,161,162,5,120,0,0,162,163,5,116,0,0,163,164,5,101,0,0,164,165,5,110,
  	0,0,165,166,5,100,0,0,166,167,5,115,0,0,167,7,1,0,0,0,168,169,5,101,0,
  	0,169,170,5,108,0,0,170,171,5,115,0,0,171,172,5,101,0,0,172,9,1,0,0,0,
  	173,174,5,102,0,0,174,175,5,97,0,0,175,176,5,108,0,0,176,177,5,115,0,
  	0,177,178,5,101,0,0,178,11,1,0,0,0,179,180,5,102,0,0,180,181,5,111,0,
  	0,181,182,5,114,0,0,182,13,1,0,0,0,183,184,5,105,0,0,184,185,5,102,0,
  	0,185,15,1,0,0,0,186,187,5,110,0,0,187,188,5,117,0,0,188,189,5,108,0,
  	0,189,190,5,108,0,0,190,17,1,0,0,0,191,192,5,114,0,0,192,193,5,101,0,
  	0,193,194,5,116,0,0,194,195,5,117,0,0,195,196,5,114,0,0,196,197,5,110,
  	0,0,197,19,1,0,0,0,198,199,5,115,0,0,199,200,5,117,0,0,200,201,5,112,
  	0,0,201,202,5,101,0,0,202,203,5,114,0,0,203,21,1,0,0,0,204,205,5,116,
  	0,0,205,206,5,104,0,0,206,207,5,105,0,0,207,208,5,115,0,0,208,23,1,0,
  	0,0,209,210,5,116,0,0,210,211,5,114,0,0,211,212,5,117,0,0,212,213,5,101,
  	0,0,213,25,1,0,0,0,214,215,5,119,0,0,215,216,5,104,0,0,216,217,5,105,
  	0,0,217,218,5,108,0,0,218,219,5,101,0,0,219,27,1,0,0,0,220,221,5,110,
  	0,0,221,222,5,101,0,0,222,223,5,119,0,0,223,29,1,0,0,0,224,225,5,99,0,
  	0,225,226,5,111,0,0,226,227,5,110,0,0,227,228,5,118,0,0,228,229,5,101,
  	0,0,229,230,5,114,0,0,230,231,5,116,0,0,231,31,1,0,0,0,232,233,5,110,
  	0,0,233,234,5,97,0,0,234,235,5,109,0,0,235,236,5,101,0,0,236,237,5,115,
  	0,0,237,238,5,112,0,0,238,239,5,97,0,0,239,240,5,99,0,0,240,241,5,101,
  	0,0,241,33,1,0,0,0,242,243,5,109,0,0,243,244,5,111,0,0,244,245,5,100,
  	0,0,245,246,5,117,0,0,246,247,5,108,0,0,247,248,5,101,0,0,248,35,1,0,
  	0,0,249,250,5,105,0,0,250,251,5,109,0,0,251,252,5,112,0,0,252,253,5,111,
  	0,0,253,254,5,114,0,0,254,255,5,116,0,0,255,37,1,0,0,0,256,257,5,117,
  	0,0,257,258,5,115,0,0,258,259,5,105,0,0,259,260,5,110,0,0,260,261,5,103,
  	0,0,261,39,1,0,0,0,262,263,5,108,0,0,263,264,5,101,0,0,264,265,5,116,
  	0,0,265,41,1,0,0,0,266,267,5,102,0,0,267,268,5,110,0,0,268,43,1,0,0,0,
  	269,270,5,99,0,0,270,271,5,111,0,0,271,272,5,110,0,0,272,273,5,115,0,
  	0,273,274,5,116,0,0,274,45,1,0,0,0,275,276,5,99,0,0,276,277,5,111,0,0,
  	277,278,5,110,0,0,278,279,5,115,0,0,279,280,5,116,0,0,280,281,5,33,0,
  	0,281,47,1,0,0,0,282,283,5,116,0,0,283,284,5,114,0,0,284,285,5,121,0,
  	0,285,49,1,0,0,0,286,287,5,99,0,0,287,288,5,97,0,0,288,289,5,116,0,0,
  	289,290,5,99,0,0,290,291,5,104,0,0,291,51,1,0,0,0,292,293,5,105,0,0,293,
  	294,5,110,0,0,294,295,5,116,0,0,295,53,1,0,0,0,296,297,5,102,0,0,297,
  	298,5,108,0,0,298,299,5,111,0,0,299,300,5,97,0,0,300,301,5,116,0,0,301,
  	55,1,0,0,0,302,303,5,98,0,0,303,304,5,111,0,0,304,305,5,111,0,0,305,306,
  	5,108,0,0,306,57,1,0,0,0,307,308,5,115,0,0,308,309,5,116,0,0,309,310,
  	5,114,0,0,310,59,1,0,0,0,311,312,5,118,0,0,312,313,5,111,0,0,313,314,
  	5,105,0,0,314,315,5,100,0,0,315,61,1,0,0,0,316,317,5,40,0,0,317,63,1,
  	0,0,0,318,319,5,41,0,0,319,65,1,0,0,0,320,321,5,123,0,0,321,67,1,0,0,
  	0,322,323,5,125,0,0,323,69,1,0,0,0,324,325,5,91,0,0,325,71,1,0,0,0,326,
  	327,5,93,0,0,327,73,1,0,0,0,328,329,5,44,0,0,329,75,1,0,0,0,330,331,5,
  	46,0,0,331,77,1,0,0,0,332,333,5,45,0,0,333,79,1,0,0,0,334,335,5,43,0,
  	0,335,81,1,0,0,0,336,337,5,59,0,0,337,83,1,0,0,0,338,339,5,47,0,0,339,
  	85,1,0,0,0,340,341,5,42,0,0,341,87,1,0,0,0,342,343,5,33,0,0,343,89,1,
  	0,0,0,344,345,5,61,0,0,345,91,1,0,0,0,346,347,5,60,0,0,347,93,1,0,0,0,
  	348,349,5,62,0,0,349,95,1,0,0,0,350,351,5,33,0,0,351,352,5,61,0,0,352,
  	97,1,0,0,0,353,354,5,61,0,0,354,355,5,61,0,0,355,99,1,0,0,0,356,357,5,
  	62,0,0,357,358,5,61,0,0,358,101,1,0,0,0,359,360,5,60,0,0,360,361,5,61,
  	0,0,361,103,1,0,0,0,362,363,5,38,0,0,363,364,5,38,0,0,364,105,1,0,0,0,
  	365,366,5,124,0,0,366,367,5,124,0,0,367,107,1,0,0,0,368,369,5,43,0,0,
  	369,370,5,43,0,0,370,109,1,0,0,0,371,372,5,45,0,0,372,373,5,45,0,0,373,
  	111,1,0,0,0,374,375,5,37,0,0,375,113,1,0,0,0,376,377,5,45,0,0,377,378,
  	5,62,0,0,378,115,1,0,0,0,379,380,5,58,0,0,380,381,5,58,0,0,381,117,1,
  	0,0,0,382,383,7,0,0,0,383,119,1,0,0,0,384,385,7,1,0,0,385,121,1,0,0,0,
  	386,389,3,120,59,0,387,389,5,95,0,0,388,386,1,0,0,0,388,387,1,0,0,0,389,
  	123,1,0,0,0,390,394,3,120,59,0,391,394,3,118,58,0,392,394,5,95,0,0,393,
  	390,1,0,0,0,393,391,1,0,0,0,393,392,1,0,0,0,394,125,1,0,0,0,395,397,3,
  	118,58,0,396,395,1,0,0,0,397,398,1,0,0,0,398,396,1,0,0,0,398,399,1,0,
  	0,0,399,406,1,0,0,0,400,402,5,46,0,0,401,403,3,118,58,0,402,401,1,0,0,
  	0,403,404,1,0,0,0,404,402,1,0,0,0,404,405,1,0,0,0,405,407,1,0,0,0,406,
  	400,1,0,0,0,406,407,1,0,0,0,407,127,1,0,0,0,408,412,3,122,60,0,409,411,
  	3,124,61,0,410,409,1,0,0,0,411,414,1,0,0,0,412,410,1,0,0,0,412,413,1,
  	0,0,0,413,129,1,0,0,0,414,412,1,0,0,0,415,419,5,34,0,0,416,418,8,2,0,
  	0,417,416,1,0,0,0,418,421,1,0,0,0,419,417,1,0,0,0,419,420,1,0,0,0,420,
  	422,1,0,0,0,421,419,1,0,0,0,422,423,5,34,0,0,423,131,1,0,0,0,424,425,
  	5,34,0,0,425,426,1,0,0,0,426,427,6,65,0,0,427,133,1,0,0,0,428,429,5,47,
  	0,0,429,430,5,47,0,0,430,434,1,0,0,0,431,433,8,3,0,0,432,431,1,0,0,0,
  	433,436,1,0,0,0,434,432,1,0,0,0,434,435,1,0,0,0,435,437,1,0,0,0,436,434,
  	1,0,0,0,437,438,6,66,1,0,438,135,1,0,0,0,439,441,7,4,0,0,440,439,1,0,
  	0,0,441,442,1,0,0,0,442,440,1,0,0,0,442,443,1,0,0,0,443,444,1,0,0,0,444,
  	445,6,67,1,0,445,137,1,0,0,0,446,448,8,5,0,0,447,446,1,0,0,0,448,449,
  	1,0,0,0,449,447,1,0,0,0,449,450,1,0,0,0,450,139,1,0,0,0,451,452,5,92,
  	0,0,452,459,7,6,0,0,453,454,5,92,0,0,454,455,5,117,0,0,455,456,1,0,0,
  	0,456,457,7,7,0,0,457,459,6,69,2,0,458,451,1,0,0,0,458,453,1,0,0,0,459,
  	141,1,0,0,0,460,461,5,36,0,0,461,462,5,123,0,0,462,463,1,0,0,0,463,464,
  	6,70,3,0,464,143,1,0,0,0,465,466,5,125,0,0,466,467,1,0,0,0,467,468,6,
  	71,4,0,468,145,1,0,0,0,469,470,5,34,0,0,470,471,1,0,0,0,471,472,6,72,
  	4,0,472,147,1,0,0,0,13,0,1,388,393,398,404,406,412,419,434,442,449,458,
  	5,5,1,0,6,0,0,1,69,0,5,0,0,4,0,0
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  prystlexerLexerStaticData = std::move(staticData);
}

}

PrystLexer::PrystLexer(CharStream *input) : Lexer(input) {
  PrystLexer::initialize();
  _interpreter = new atn::LexerATNSimulator(this, *prystlexerLexerStaticData->atn, prystlexerLexerStaticData->decisionToDFA, prystlexerLexerStaticData->sharedContextCache);
}

PrystLexer::~PrystLexer() {
  delete _interpreter;
}

std::string PrystLexer::getGrammarFileName() const {
  return "PrystLexer.g4";
}

const std::vector<std::string>& PrystLexer::getRuleNames() const {
  return prystlexerLexerStaticData->ruleNames;
}

const std::vector<std::string>& PrystLexer::getChannelNames() const {
  return prystlexerLexerStaticData->channelNames;
}

const std::vector<std::string>& PrystLexer::getModeNames() const {
  return prystlexerLexerStaticData->modeNames;
}

const dfa::Vocabulary& PrystLexer::getVocabulary() const {
  return prystlexerLexerStaticData->vocabulary;
}

antlr4::atn::SerializedATNView PrystLexer::getSerializedATN() const {
  return prystlexerLexerStaticData->serializedATN;
}

const atn::ATN& PrystLexer::getATN() const {
  return *prystlexerLexerStaticData->atn;
}


void PrystLexer::action(RuleContext *context, size_t ruleIndex, size_t actionIndex) {
  switch (ruleIndex) {
    case 69: ESCAPE_SEQAction(antlrcpp::downCast<antlr4::RuleContext *>(context), actionIndex); break;

  default:
    break;
  }
}

void PrystLexer::ESCAPE_SEQAction(antlr4::RuleContext *context, size_t actionIndex) {
  switch (actionIndex) {
    case 0: 4 break;

  default:
    break;
  }
}



void PrystLexer::initialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  prystlexerLexerInitialize();
#else
  ::antlr4::internal::call_once(prystlexerLexerOnceFlag, prystlexerLexerInitialize);
#endif
}
