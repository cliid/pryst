
// Generated from /home/ubuntu/pryst-workspace/pryst-cpp/src/PrystLexer.g4 by ANTLR 4.13.1


#include "PrystLexer.h"


using namespace antlr4;

using namespace pryst;


using namespace antlr4;

namespace {

struct PrystLexerStaticData final {
  PrystLexerStaticData(std::vector<std::string> ruleNames,
                          std::vector<std::string> channelNames,
                          std::vector<std::string> modeNames,
                          std::vector<std::string> literalNames,
                          std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), channelNames(std::move(channelNames)),
        modeNames(std::move(modeNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  PrystLexerStaticData(const PrystLexerStaticData&) = delete;
  PrystLexerStaticData(PrystLexerStaticData&&) = delete;
  PrystLexerStaticData& operator=(const PrystLexerStaticData&) = delete;
  PrystLexerStaticData& operator=(PrystLexerStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> channelNames;
  const std::vector<std::string> modeNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag prystlexerLexerOnceFlag;
#if ANTLR4_USE_THREAD_LOCAL_CACHE
static thread_local
#endif
PrystLexerStaticData *prystlexerLexerStaticData = nullptr;

void prystlexerLexerInitialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  if (prystlexerLexerStaticData != nullptr) {
    return;
  }
#else
  assert(prystlexerLexerStaticData == nullptr);
#endif
  auto staticData = std::make_unique<PrystLexerStaticData>(
    std::vector<std::string>{
      "INTEGER", "FLOAT_LITERAL", "BOOLEAN", "INT", "FLOAT", "BOOL", "STR", 
      "VOID", "FN", "LET", "CONST", "CONST_EXPR", "CLASS", "INTERFACE", 
      "EXTENDS", "IMPLEMENTS", "RETURN", "IF", "ELSE", "WHILE", "FOR", "IN", 
      "IMPORT", "MODULE", "TRY", "CATCH", "FINALLY", "AS", "BREAK", "CONTINUE", 
      "NEW", "MAP", "FROM", "THIS", "NULL_LIT", "INSTANCEOF", "TYPEOF", 
      "ERROR", "CHAIN", "PRINT", "NULL_COALESCE", "PLUS", "MINUS", "STAR", 
      "SLASH", "PERCENT", "ASSIGN", "EQ", "NEQ", "LT", "GT", "LE", "GE", 
      "AND", "OR", "NOT", "PIPE", "AMP", "QUESTION_MARK", "COLON", "ARROW", 
      "INC", "DEC", "LPAREN", "RPAREN", "LBRACE", "RBRACE", "LBRACK", "RBRACK", 
      "SEMICOLON", "COMMA", "DOT", "DOUBLE_COLON", "IDENTIFIER", "STRING", 
      "STRING_START", "STRING_MIDDLE", "STRING_END", "WS", "COMMENT", "BLOCK_COMMENT", 
      "INVALID_CHAR", "INVALID_IDENTIFIER", "INTERP_WS", "INTERP_LPAREN", 
      "INTERP_RPAREN", "INTERP_PLUS", "INTERP_MINUS", "INTERP_STAR", "INTERP_SLASH", 
      "INTERP_DOT", "INTERP_COMMA", "INTERP_IDENTIFIER", "INTERP_INTEGER", 
      "INTERP_STRING"
    },
    std::vector<std::string>{
      "DEFAULT_TOKEN_CHANNEL", "HIDDEN"
    },
    std::vector<std::string>{
      "DEFAULT_MODE", "INTERPOLATION"
    },
    std::vector<std::string>{
      "", "", "", "", "'int'", "'float'", "'bool'", "'str'", "'void'", "'fn'", 
      "'let'", "'const'", "'const!'", "'class'", "'interface'", "'extends'", 
      "'implements'", "'return'", "'if'", "'else'", "'while'", "'for'", 
      "'in'", "'import'", "'module'", "'try'", "'catch'", "'finally'", "'as'", 
      "'break'", "'continue'", "'new'", "'map'", "'from'", "'this'", "'null'", 
      "'instanceof'", "'typeof'", "'error'", "'chain'", "'print'", "'\\u003F\\u003F'", 
      "", "", "", "", "'%'", "'='", "'=='", "'!='", "'<'", "'>'", "'<='", 
      "'>='", "'&&'", "'||'", "'!'", "'|'", "'&'", "'\\u003F'", "':'", "'->'", 
      "'++'", "'--'", "", "", "'{'", "'}'", "'['", "']'", "';'", "", "", 
      "'::'"
    },
    std::vector<std::string>{
      "", "INTEGER", "FLOAT_LITERAL", "BOOLEAN", "INT", "FLOAT", "BOOL", 
      "STR", "VOID", "FN", "LET", "CONST", "CONST_EXPR", "CLASS", "INTERFACE", 
      "EXTENDS", "IMPLEMENTS", "RETURN", "IF", "ELSE", "WHILE", "FOR", "IN", 
      "IMPORT", "MODULE", "TRY", "CATCH", "FINALLY", "AS", "BREAK", "CONTINUE", 
      "NEW", "MAP", "FROM", "THIS", "NULL_LIT", "INSTANCEOF", "TYPEOF", 
      "ERROR", "CHAIN", "PRINT", "NULL_COALESCE", "PLUS", "MINUS", "STAR", 
      "SLASH", "PERCENT", "ASSIGN", "EQ", "NEQ", "LT", "GT", "LE", "GE", 
      "AND", "OR", "NOT", "PIPE", "AMP", "QUESTION_MARK", "COLON", "ARROW", 
      "INC", "DEC", "LPAREN", "RPAREN", "LBRACE", "RBRACE", "LBRACK", "RBRACK", 
      "SEMICOLON", "COMMA", "DOT", "DOUBLE_COLON", "IDENTIFIER", "STRING", 
      "STRING_START", "STRING_MIDDLE", "STRING_END", "WS", "COMMENT", "BLOCK_COMMENT", 
      "INVALID_CHAR", "INVALID_IDENTIFIER", "INTERP_WS"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,0,84,696,6,-1,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
  	2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
  	13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,
  	20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,
  	27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,
  	34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,
  	41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,
  	48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,
  	55,2,56,7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,
  	62,2,63,7,63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,
  	69,2,70,7,70,2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,
  	76,2,77,7,77,2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,
  	83,2,84,7,84,2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,
  	90,2,91,7,91,2,92,7,92,2,93,7,93,2,94,7,94,1,0,4,0,194,8,0,11,0,12,0,
  	195,1,1,4,1,199,8,1,11,1,12,1,200,1,1,1,1,4,1,205,8,1,11,1,12,1,206,1,
  	1,1,1,3,1,211,8,1,1,1,4,1,214,8,1,11,1,12,1,215,3,1,218,8,1,1,2,1,2,1,
  	2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,229,8,2,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,
  	1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,8,1,
  	8,1,8,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,
  	11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,
  	13,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,
  	15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,
  	16,1,16,1,16,1,16,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,19,1,19,1,
  	19,1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,21,1,21,1,21,1,22,1,22,1,22,1,
  	22,1,22,1,22,1,22,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,24,1,24,1,24,1,
  	24,1,25,1,25,1,25,1,25,1,25,1,25,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,
  	26,1,27,1,27,1,27,1,28,1,28,1,28,1,28,1,28,1,28,1,29,1,29,1,29,1,29,1,
  	29,1,29,1,29,1,29,1,29,1,30,1,30,1,30,1,30,1,31,1,31,1,31,1,31,1,32,1,
  	32,1,32,1,32,1,32,1,33,1,33,1,33,1,33,1,33,1,34,1,34,1,34,1,34,1,34,1,
  	35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,36,1,36,1,36,1,
  	36,1,36,1,36,1,36,1,37,1,37,1,37,1,37,1,37,1,37,1,38,1,38,1,38,1,38,1,
  	38,1,38,1,39,1,39,1,39,1,39,1,39,1,39,1,40,1,40,1,40,1,41,1,41,1,42,1,
  	42,1,43,1,43,1,44,1,44,1,45,1,45,1,46,1,46,1,47,1,47,1,47,1,48,1,48,1,
  	48,1,49,1,49,1,50,1,50,1,51,1,51,1,51,1,52,1,52,1,52,1,53,1,53,1,53,1,
  	54,1,54,1,54,1,55,1,55,1,56,1,56,1,57,1,57,1,58,1,58,1,59,1,59,1,60,1,
  	60,1,60,1,61,1,61,1,61,1,62,1,62,1,62,1,63,1,63,1,64,1,64,1,65,1,65,1,
  	66,1,66,1,67,1,67,1,68,1,68,1,69,1,69,1,70,1,70,1,71,1,71,1,72,1,72,1,
  	72,1,73,1,73,5,73,526,8,73,10,73,12,73,529,9,73,1,74,1,74,1,74,1,74,5,
  	74,535,8,74,10,74,12,74,538,9,74,1,74,1,74,1,75,1,75,1,75,1,75,5,75,546,
  	8,75,10,75,12,75,549,9,75,1,75,1,75,1,75,1,75,1,75,1,76,1,76,1,76,1,76,
  	5,76,560,8,76,10,76,12,76,563,9,76,1,76,1,76,1,76,1,76,1,76,1,77,1,77,
  	1,77,1,77,5,77,574,8,77,10,77,12,77,577,9,77,1,77,1,77,1,77,1,77,1,78,
  	4,78,584,8,78,11,78,12,78,585,1,78,1,78,1,79,1,79,1,79,1,79,5,79,594,
  	8,79,10,79,12,79,597,9,79,1,79,1,79,1,80,1,80,1,80,1,80,5,80,605,8,80,
  	10,80,12,80,608,9,80,1,80,1,80,1,80,1,80,1,80,1,81,1,81,1,81,1,81,1,82,
  	1,82,1,82,5,82,622,8,82,10,82,12,82,625,9,82,1,82,1,82,1,83,4,83,630,
  	8,83,11,83,12,83,631,1,83,1,83,1,84,1,84,1,84,1,84,1,85,1,85,1,85,1,85,
  	1,86,1,86,1,86,1,86,1,87,1,87,1,87,1,87,1,88,1,88,1,88,1,88,1,89,1,89,
  	1,89,1,89,1,90,1,90,1,90,1,90,1,91,1,91,1,91,1,91,1,92,1,92,5,92,670,
  	8,92,10,92,12,92,673,9,92,1,92,1,92,1,93,4,93,678,8,93,11,93,12,93,679,
  	1,93,1,93,1,94,1,94,1,94,1,94,5,94,688,8,94,10,94,12,94,691,9,94,1,94,
  	1,94,1,94,1,94,1,606,0,95,2,1,4,2,6,3,8,4,10,5,12,6,14,7,16,8,18,9,20,
  	10,22,11,24,12,26,13,28,14,30,15,32,16,34,17,36,18,38,19,40,20,42,21,
  	44,22,46,23,48,24,50,25,52,26,54,27,56,28,58,29,60,30,62,31,64,32,66,
  	33,68,34,70,35,72,36,74,37,76,38,78,39,80,40,82,41,84,42,86,43,88,44,
  	90,45,92,46,94,47,96,48,98,49,100,50,102,51,104,52,106,53,108,54,110,
  	55,112,56,114,57,116,58,118,59,120,60,122,61,124,62,126,63,128,64,130,
  	65,132,66,134,67,136,68,138,69,140,70,142,71,144,72,146,73,148,74,150,
  	75,152,76,154,77,156,78,158,79,160,80,162,81,164,82,166,83,168,84,170,
  	0,172,0,174,0,176,0,178,0,180,0,182,0,184,0,186,0,188,0,190,0,2,0,1,9,
  	1,0,48,57,2,0,69,69,101,101,2,0,43,43,45,45,3,0,65,90,95,95,97,122,4,
  	0,48,57,65,90,95,95,97,122,4,0,10,10,13,13,34,34,92,92,6,0,10,10,13,13,
  	34,34,36,36,92,92,123,123,3,0,9,10,13,13,32,32,2,0,10,10,13,13,719,0,
  	2,1,0,0,0,0,4,1,0,0,0,0,6,1,0,0,0,0,8,1,0,0,0,0,10,1,0,0,0,0,12,1,0,0,
  	0,0,14,1,0,0,0,0,16,1,0,0,0,0,18,1,0,0,0,0,20,1,0,0,0,0,22,1,0,0,0,0,
  	24,1,0,0,0,0,26,1,0,0,0,0,28,1,0,0,0,0,30,1,0,0,0,0,32,1,0,0,0,0,34,1,
  	0,0,0,0,36,1,0,0,0,0,38,1,0,0,0,0,40,1,0,0,0,0,42,1,0,0,0,0,44,1,0,0,
  	0,0,46,1,0,0,0,0,48,1,0,0,0,0,50,1,0,0,0,0,52,1,0,0,0,0,54,1,0,0,0,0,
  	56,1,0,0,0,0,58,1,0,0,0,0,60,1,0,0,0,0,62,1,0,0,0,0,64,1,0,0,0,0,66,1,
  	0,0,0,0,68,1,0,0,0,0,70,1,0,0,0,0,72,1,0,0,0,0,74,1,0,0,0,0,76,1,0,0,
  	0,0,78,1,0,0,0,0,80,1,0,0,0,0,82,1,0,0,0,0,84,1,0,0,0,0,86,1,0,0,0,0,
  	88,1,0,0,0,0,90,1,0,0,0,0,92,1,0,0,0,0,94,1,0,0,0,0,96,1,0,0,0,0,98,1,
  	0,0,0,0,100,1,0,0,0,0,102,1,0,0,0,0,104,1,0,0,0,0,106,1,0,0,0,0,108,1,
  	0,0,0,0,110,1,0,0,0,0,112,1,0,0,0,0,114,1,0,0,0,0,116,1,0,0,0,0,118,1,
  	0,0,0,0,120,1,0,0,0,0,122,1,0,0,0,0,124,1,0,0,0,0,126,1,0,0,0,0,128,1,
  	0,0,0,0,130,1,0,0,0,0,132,1,0,0,0,0,134,1,0,0,0,0,136,1,0,0,0,0,138,1,
  	0,0,0,0,140,1,0,0,0,0,142,1,0,0,0,0,144,1,0,0,0,0,146,1,0,0,0,0,148,1,
  	0,0,0,0,150,1,0,0,0,0,152,1,0,0,0,0,154,1,0,0,0,0,156,1,0,0,0,0,158,1,
  	0,0,0,0,160,1,0,0,0,0,162,1,0,0,0,0,164,1,0,0,0,0,166,1,0,0,0,1,168,1,
  	0,0,0,1,170,1,0,0,0,1,172,1,0,0,0,1,174,1,0,0,0,1,176,1,0,0,0,1,178,1,
  	0,0,0,1,180,1,0,0,0,1,182,1,0,0,0,1,184,1,0,0,0,1,186,1,0,0,0,1,188,1,
  	0,0,0,1,190,1,0,0,0,2,193,1,0,0,0,4,198,1,0,0,0,6,228,1,0,0,0,8,230,1,
  	0,0,0,10,234,1,0,0,0,12,240,1,0,0,0,14,245,1,0,0,0,16,249,1,0,0,0,18,
  	254,1,0,0,0,20,257,1,0,0,0,22,261,1,0,0,0,24,267,1,0,0,0,26,274,1,0,0,
  	0,28,280,1,0,0,0,30,290,1,0,0,0,32,298,1,0,0,0,34,309,1,0,0,0,36,316,
  	1,0,0,0,38,319,1,0,0,0,40,324,1,0,0,0,42,330,1,0,0,0,44,334,1,0,0,0,46,
  	337,1,0,0,0,48,344,1,0,0,0,50,351,1,0,0,0,52,355,1,0,0,0,54,361,1,0,0,
  	0,56,369,1,0,0,0,58,372,1,0,0,0,60,378,1,0,0,0,62,387,1,0,0,0,64,391,
  	1,0,0,0,66,395,1,0,0,0,68,400,1,0,0,0,70,405,1,0,0,0,72,410,1,0,0,0,74,
  	421,1,0,0,0,76,428,1,0,0,0,78,434,1,0,0,0,80,440,1,0,0,0,82,446,1,0,0,
  	0,84,449,1,0,0,0,86,451,1,0,0,0,88,453,1,0,0,0,90,455,1,0,0,0,92,457,
  	1,0,0,0,94,459,1,0,0,0,96,461,1,0,0,0,98,464,1,0,0,0,100,467,1,0,0,0,
  	102,469,1,0,0,0,104,471,1,0,0,0,106,474,1,0,0,0,108,477,1,0,0,0,110,480,
  	1,0,0,0,112,483,1,0,0,0,114,485,1,0,0,0,116,487,1,0,0,0,118,489,1,0,0,
  	0,120,491,1,0,0,0,122,493,1,0,0,0,124,496,1,0,0,0,126,499,1,0,0,0,128,
  	502,1,0,0,0,130,504,1,0,0,0,132,506,1,0,0,0,134,508,1,0,0,0,136,510,1,
  	0,0,0,138,512,1,0,0,0,140,514,1,0,0,0,142,516,1,0,0,0,144,518,1,0,0,0,
  	146,520,1,0,0,0,148,523,1,0,0,0,150,530,1,0,0,0,152,541,1,0,0,0,154,555,
  	1,0,0,0,156,569,1,0,0,0,158,583,1,0,0,0,160,589,1,0,0,0,162,600,1,0,0,
  	0,164,614,1,0,0,0,166,618,1,0,0,0,168,629,1,0,0,0,170,635,1,0,0,0,172,
  	639,1,0,0,0,174,643,1,0,0,0,176,647,1,0,0,0,178,651,1,0,0,0,180,655,1,
  	0,0,0,182,659,1,0,0,0,184,663,1,0,0,0,186,667,1,0,0,0,188,677,1,0,0,0,
  	190,683,1,0,0,0,192,194,7,0,0,0,193,192,1,0,0,0,194,195,1,0,0,0,195,193,
  	1,0,0,0,195,196,1,0,0,0,196,3,1,0,0,0,197,199,7,0,0,0,198,197,1,0,0,0,
  	199,200,1,0,0,0,200,198,1,0,0,0,200,201,1,0,0,0,201,202,1,0,0,0,202,204,
  	5,46,0,0,203,205,7,0,0,0,204,203,1,0,0,0,205,206,1,0,0,0,206,204,1,0,
  	0,0,206,207,1,0,0,0,207,217,1,0,0,0,208,210,7,1,0,0,209,211,7,2,0,0,210,
  	209,1,0,0,0,210,211,1,0,0,0,211,213,1,0,0,0,212,214,7,0,0,0,213,212,1,
  	0,0,0,214,215,1,0,0,0,215,213,1,0,0,0,215,216,1,0,0,0,216,218,1,0,0,0,
  	217,208,1,0,0,0,217,218,1,0,0,0,218,5,1,0,0,0,219,220,5,116,0,0,220,221,
  	5,114,0,0,221,222,5,117,0,0,222,229,5,101,0,0,223,224,5,102,0,0,224,225,
  	5,97,0,0,225,226,5,108,0,0,226,227,5,115,0,0,227,229,5,101,0,0,228,219,
  	1,0,0,0,228,223,1,0,0,0,229,7,1,0,0,0,230,231,5,105,0,0,231,232,5,110,
  	0,0,232,233,5,116,0,0,233,9,1,0,0,0,234,235,5,102,0,0,235,236,5,108,0,
  	0,236,237,5,111,0,0,237,238,5,97,0,0,238,239,5,116,0,0,239,11,1,0,0,0,
  	240,241,5,98,0,0,241,242,5,111,0,0,242,243,5,111,0,0,243,244,5,108,0,
  	0,244,13,1,0,0,0,245,246,5,115,0,0,246,247,5,116,0,0,247,248,5,114,0,
  	0,248,15,1,0,0,0,249,250,5,118,0,0,250,251,5,111,0,0,251,252,5,105,0,
  	0,252,253,5,100,0,0,253,17,1,0,0,0,254,255,5,102,0,0,255,256,5,110,0,
  	0,256,19,1,0,0,0,257,258,5,108,0,0,258,259,5,101,0,0,259,260,5,116,0,
  	0,260,21,1,0,0,0,261,262,5,99,0,0,262,263,5,111,0,0,263,264,5,110,0,0,
  	264,265,5,115,0,0,265,266,5,116,0,0,266,23,1,0,0,0,267,268,5,99,0,0,268,
  	269,5,111,0,0,269,270,5,110,0,0,270,271,5,115,0,0,271,272,5,116,0,0,272,
  	273,5,33,0,0,273,25,1,0,0,0,274,275,5,99,0,0,275,276,5,108,0,0,276,277,
  	5,97,0,0,277,278,5,115,0,0,278,279,5,115,0,0,279,27,1,0,0,0,280,281,5,
  	105,0,0,281,282,5,110,0,0,282,283,5,116,0,0,283,284,5,101,0,0,284,285,
  	5,114,0,0,285,286,5,102,0,0,286,287,5,97,0,0,287,288,5,99,0,0,288,289,
  	5,101,0,0,289,29,1,0,0,0,290,291,5,101,0,0,291,292,5,120,0,0,292,293,
  	5,116,0,0,293,294,5,101,0,0,294,295,5,110,0,0,295,296,5,100,0,0,296,297,
  	5,115,0,0,297,31,1,0,0,0,298,299,5,105,0,0,299,300,5,109,0,0,300,301,
  	5,112,0,0,301,302,5,108,0,0,302,303,5,101,0,0,303,304,5,109,0,0,304,305,
  	5,101,0,0,305,306,5,110,0,0,306,307,5,116,0,0,307,308,5,115,0,0,308,33,
  	1,0,0,0,309,310,5,114,0,0,310,311,5,101,0,0,311,312,5,116,0,0,312,313,
  	5,117,0,0,313,314,5,114,0,0,314,315,5,110,0,0,315,35,1,0,0,0,316,317,
  	5,105,0,0,317,318,5,102,0,0,318,37,1,0,0,0,319,320,5,101,0,0,320,321,
  	5,108,0,0,321,322,5,115,0,0,322,323,5,101,0,0,323,39,1,0,0,0,324,325,
  	5,119,0,0,325,326,5,104,0,0,326,327,5,105,0,0,327,328,5,108,0,0,328,329,
  	5,101,0,0,329,41,1,0,0,0,330,331,5,102,0,0,331,332,5,111,0,0,332,333,
  	5,114,0,0,333,43,1,0,0,0,334,335,5,105,0,0,335,336,5,110,0,0,336,45,1,
  	0,0,0,337,338,5,105,0,0,338,339,5,109,0,0,339,340,5,112,0,0,340,341,5,
  	111,0,0,341,342,5,114,0,0,342,343,5,116,0,0,343,47,1,0,0,0,344,345,5,
  	109,0,0,345,346,5,111,0,0,346,347,5,100,0,0,347,348,5,117,0,0,348,349,
  	5,108,0,0,349,350,5,101,0,0,350,49,1,0,0,0,351,352,5,116,0,0,352,353,
  	5,114,0,0,353,354,5,121,0,0,354,51,1,0,0,0,355,356,5,99,0,0,356,357,5,
  	97,0,0,357,358,5,116,0,0,358,359,5,99,0,0,359,360,5,104,0,0,360,53,1,
  	0,0,0,361,362,5,102,0,0,362,363,5,105,0,0,363,364,5,110,0,0,364,365,5,
  	97,0,0,365,366,5,108,0,0,366,367,5,108,0,0,367,368,5,121,0,0,368,55,1,
  	0,0,0,369,370,5,97,0,0,370,371,5,115,0,0,371,57,1,0,0,0,372,373,5,98,
  	0,0,373,374,5,114,0,0,374,375,5,101,0,0,375,376,5,97,0,0,376,377,5,107,
  	0,0,377,59,1,0,0,0,378,379,5,99,0,0,379,380,5,111,0,0,380,381,5,110,0,
  	0,381,382,5,116,0,0,382,383,5,105,0,0,383,384,5,110,0,0,384,385,5,117,
  	0,0,385,386,5,101,0,0,386,61,1,0,0,0,387,388,5,110,0,0,388,389,5,101,
  	0,0,389,390,5,119,0,0,390,63,1,0,0,0,391,392,5,109,0,0,392,393,5,97,0,
  	0,393,394,5,112,0,0,394,65,1,0,0,0,395,396,5,102,0,0,396,397,5,114,0,
  	0,397,398,5,111,0,0,398,399,5,109,0,0,399,67,1,0,0,0,400,401,5,116,0,
  	0,401,402,5,104,0,0,402,403,5,105,0,0,403,404,5,115,0,0,404,69,1,0,0,
  	0,405,406,5,110,0,0,406,407,5,117,0,0,407,408,5,108,0,0,408,409,5,108,
  	0,0,409,71,1,0,0,0,410,411,5,105,0,0,411,412,5,110,0,0,412,413,5,115,
  	0,0,413,414,5,116,0,0,414,415,5,97,0,0,415,416,5,110,0,0,416,417,5,99,
  	0,0,417,418,5,101,0,0,418,419,5,111,0,0,419,420,5,102,0,0,420,73,1,0,
  	0,0,421,422,5,116,0,0,422,423,5,121,0,0,423,424,5,112,0,0,424,425,5,101,
  	0,0,425,426,5,111,0,0,426,427,5,102,0,0,427,75,1,0,0,0,428,429,5,101,
  	0,0,429,430,5,114,0,0,430,431,5,114,0,0,431,432,5,111,0,0,432,433,5,114,
  	0,0,433,77,1,0,0,0,434,435,5,99,0,0,435,436,5,104,0,0,436,437,5,97,0,
  	0,437,438,5,105,0,0,438,439,5,110,0,0,439,79,1,0,0,0,440,441,5,112,0,
  	0,441,442,5,114,0,0,442,443,5,105,0,0,443,444,5,110,0,0,444,445,5,116,
  	0,0,445,81,1,0,0,0,446,447,5,63,0,0,447,448,5,63,0,0,448,83,1,0,0,0,449,
  	450,5,43,0,0,450,85,1,0,0,0,451,452,5,45,0,0,452,87,1,0,0,0,453,454,5,
  	42,0,0,454,89,1,0,0,0,455,456,5,47,0,0,456,91,1,0,0,0,457,458,5,37,0,
  	0,458,93,1,0,0,0,459,460,5,61,0,0,460,95,1,0,0,0,461,462,5,61,0,0,462,
  	463,5,61,0,0,463,97,1,0,0,0,464,465,5,33,0,0,465,466,5,61,0,0,466,99,
  	1,0,0,0,467,468,5,60,0,0,468,101,1,0,0,0,469,470,5,62,0,0,470,103,1,0,
  	0,0,471,472,5,60,0,0,472,473,5,61,0,0,473,105,1,0,0,0,474,475,5,62,0,
  	0,475,476,5,61,0,0,476,107,1,0,0,0,477,478,5,38,0,0,478,479,5,38,0,0,
  	479,109,1,0,0,0,480,481,5,124,0,0,481,482,5,124,0,0,482,111,1,0,0,0,483,
  	484,5,33,0,0,484,113,1,0,0,0,485,486,5,124,0,0,486,115,1,0,0,0,487,488,
  	5,38,0,0,488,117,1,0,0,0,489,490,5,63,0,0,490,119,1,0,0,0,491,492,5,58,
  	0,0,492,121,1,0,0,0,493,494,5,45,0,0,494,495,5,62,0,0,495,123,1,0,0,0,
  	496,497,5,43,0,0,497,498,5,43,0,0,498,125,1,0,0,0,499,500,5,45,0,0,500,
  	501,5,45,0,0,501,127,1,0,0,0,502,503,5,40,0,0,503,129,1,0,0,0,504,505,
  	5,41,0,0,505,131,1,0,0,0,506,507,5,123,0,0,507,133,1,0,0,0,508,509,5,
  	125,0,0,509,135,1,0,0,0,510,511,5,91,0,0,511,137,1,0,0,0,512,513,5,93,
  	0,0,513,139,1,0,0,0,514,515,5,59,0,0,515,141,1,0,0,0,516,517,5,44,0,0,
  	517,143,1,0,0,0,518,519,5,46,0,0,519,145,1,0,0,0,520,521,5,58,0,0,521,
  	522,5,58,0,0,522,147,1,0,0,0,523,527,7,3,0,0,524,526,7,4,0,0,525,524,
  	1,0,0,0,526,529,1,0,0,0,527,525,1,0,0,0,527,528,1,0,0,0,528,149,1,0,0,
  	0,529,527,1,0,0,0,530,536,5,34,0,0,531,535,8,5,0,0,532,533,5,92,0,0,533,
  	535,9,0,0,0,534,531,1,0,0,0,534,532,1,0,0,0,535,538,1,0,0,0,536,534,1,
  	0,0,0,536,537,1,0,0,0,537,539,1,0,0,0,538,536,1,0,0,0,539,540,5,34,0,
  	0,540,151,1,0,0,0,541,547,5,34,0,0,542,546,8,6,0,0,543,544,5,92,0,0,544,
  	546,9,0,0,0,545,542,1,0,0,0,545,543,1,0,0,0,546,549,1,0,0,0,547,545,1,
  	0,0,0,547,548,1,0,0,0,548,550,1,0,0,0,549,547,1,0,0,0,550,551,5,36,0,
  	0,551,552,5,123,0,0,552,553,1,0,0,0,553,554,6,75,0,0,554,153,1,0,0,0,
  	555,561,5,125,0,0,556,560,8,6,0,0,557,558,5,92,0,0,558,560,9,0,0,0,559,
  	556,1,0,0,0,559,557,1,0,0,0,560,563,1,0,0,0,561,559,1,0,0,0,561,562,1,
  	0,0,0,562,564,1,0,0,0,563,561,1,0,0,0,564,565,5,36,0,0,565,566,5,123,
  	0,0,566,567,1,0,0,0,567,568,6,76,0,0,568,155,1,0,0,0,569,575,5,125,0,
  	0,570,574,8,6,0,0,571,572,5,92,0,0,572,574,9,0,0,0,573,570,1,0,0,0,573,
  	571,1,0,0,0,574,577,1,0,0,0,575,573,1,0,0,0,575,576,1,0,0,0,576,578,1,
  	0,0,0,577,575,1,0,0,0,578,579,5,34,0,0,579,580,1,0,0,0,580,581,6,77,1,
  	0,581,157,1,0,0,0,582,584,7,7,0,0,583,582,1,0,0,0,584,585,1,0,0,0,585,
  	583,1,0,0,0,585,586,1,0,0,0,586,587,1,0,0,0,587,588,6,78,2,0,588,159,
  	1,0,0,0,589,590,5,47,0,0,590,591,5,47,0,0,591,595,1,0,0,0,592,594,8,8,
  	0,0,593,592,1,0,0,0,594,597,1,0,0,0,595,593,1,0,0,0,595,596,1,0,0,0,596,
  	598,1,0,0,0,597,595,1,0,0,0,598,599,6,79,2,0,599,161,1,0,0,0,600,601,
  	5,47,0,0,601,602,5,42,0,0,602,606,1,0,0,0,603,605,9,0,0,0,604,603,1,0,
  	0,0,605,608,1,0,0,0,606,607,1,0,0,0,606,604,1,0,0,0,607,609,1,0,0,0,608,
  	606,1,0,0,0,609,610,5,42,0,0,610,611,5,47,0,0,611,612,1,0,0,0,612,613,
  	6,80,2,0,613,163,1,0,0,0,614,615,9,0,0,0,615,616,1,0,0,0,616,617,6,81,
  	2,0,617,165,1,0,0,0,618,619,7,0,0,0,619,623,7,3,0,0,620,622,7,4,0,0,621,
  	620,1,0,0,0,622,625,1,0,0,0,623,621,1,0,0,0,623,624,1,0,0,0,624,626,1,
  	0,0,0,625,623,1,0,0,0,626,627,6,82,2,0,627,167,1,0,0,0,628,630,7,7,0,
  	0,629,628,1,0,0,0,630,631,1,0,0,0,631,629,1,0,0,0,631,632,1,0,0,0,632,
  	633,1,0,0,0,633,634,6,83,2,0,634,169,1,0,0,0,635,636,5,40,0,0,636,637,
  	1,0,0,0,637,638,6,84,3,0,638,171,1,0,0,0,639,640,5,41,0,0,640,641,1,0,
  	0,0,641,642,6,85,4,0,642,173,1,0,0,0,643,644,5,43,0,0,644,645,1,0,0,0,
  	645,646,6,86,5,0,646,175,1,0,0,0,647,648,5,45,0,0,648,649,1,0,0,0,649,
  	650,6,87,6,0,650,177,1,0,0,0,651,652,5,42,0,0,652,653,1,0,0,0,653,654,
  	6,88,7,0,654,179,1,0,0,0,655,656,5,47,0,0,656,657,1,0,0,0,657,658,6,89,
  	8,0,658,181,1,0,0,0,659,660,5,46,0,0,660,661,1,0,0,0,661,662,6,90,9,0,
  	662,183,1,0,0,0,663,664,5,44,0,0,664,665,1,0,0,0,665,666,6,91,10,0,666,
  	185,1,0,0,0,667,671,7,3,0,0,668,670,7,4,0,0,669,668,1,0,0,0,670,673,1,
  	0,0,0,671,669,1,0,0,0,671,672,1,0,0,0,672,674,1,0,0,0,673,671,1,0,0,0,
  	674,675,6,92,11,0,675,187,1,0,0,0,676,678,7,0,0,0,677,676,1,0,0,0,678,
  	679,1,0,0,0,679,677,1,0,0,0,679,680,1,0,0,0,680,681,1,0,0,0,681,682,6,
  	93,12,0,682,189,1,0,0,0,683,689,5,34,0,0,684,688,8,5,0,0,685,686,5,92,
  	0,0,686,688,9,0,0,0,687,684,1,0,0,0,687,685,1,0,0,0,688,691,1,0,0,0,689,
  	687,1,0,0,0,689,690,1,0,0,0,690,692,1,0,0,0,691,689,1,0,0,0,692,693,5,
  	34,0,0,693,694,1,0,0,0,694,695,6,94,13,0,695,191,1,0,0,0,27,0,1,195,200,
  	206,210,215,217,228,527,534,536,545,547,559,561,573,575,585,595,606,623,
  	631,671,679,687,689,14,5,1,0,4,0,0,6,0,0,7,64,0,7,65,0,7,42,0,7,43,0,
  	7,44,0,7,45,0,7,72,0,7,71,0,7,74,0,7,1,0,7,75,0
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  prystlexerLexerStaticData = staticData.release();
}

}

PrystLexer::PrystLexer(CharStream *input) : Lexer(input) {
  PrystLexer::initialize();
  _interpreter = new atn::LexerATNSimulator(this, *prystlexerLexerStaticData->atn, prystlexerLexerStaticData->decisionToDFA, prystlexerLexerStaticData->sharedContextCache);
}

PrystLexer::~PrystLexer() {
  delete _interpreter;
}

std::string PrystLexer::getGrammarFileName() const {
  return "PrystLexer.g4";
}

const std::vector<std::string>& PrystLexer::getRuleNames() const {
  return prystlexerLexerStaticData->ruleNames;
}

const std::vector<std::string>& PrystLexer::getChannelNames() const {
  return prystlexerLexerStaticData->channelNames;
}

const std::vector<std::string>& PrystLexer::getModeNames() const {
  return prystlexerLexerStaticData->modeNames;
}

const dfa::Vocabulary& PrystLexer::getVocabulary() const {
  return prystlexerLexerStaticData->vocabulary;
}

antlr4::atn::SerializedATNView PrystLexer::getSerializedATN() const {
  return prystlexerLexerStaticData->serializedATN;
}

const atn::ATN& PrystLexer::getATN() const {
  return *prystlexerLexerStaticData->atn;
}




void PrystLexer::initialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  prystlexerLexerInitialize();
#else
  ::antlr4::internal::call_once(prystlexerLexerOnceFlag, prystlexerLexerInitialize);
#endif
}
