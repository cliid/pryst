#include "llvm_codegen.hpp"
#include "utils/debug.hpp"
#include <sstream>

namespace pryst {

std::any LLVMCodegen::visitProgram(PrystParser::ProgramContext* ctx) {
    PRYST_DEBUG("Visiting program");
    for (auto decl : ctx->declaration()) {
        visit(decl);
    }
    return nullptr;
}

std::any LLVMCodegen::visitDeclaration(PrystParser::DeclarationContext* ctx) {
    PRYST_DEBUG("Visiting declaration");
    return visitChildren(ctx);
}

std::any LLVMCodegen::visitGlobalUsingDecl(PrystParser::GlobalUsingDeclContext* ctx) {
    PRYST_DEBUG("Visiting global using declaration");
    auto qualifiedId = visit(ctx->qualifiedIdentifier());
    std::string target = std::any_cast<std::string>(qualifiedId);
    return nullptr;
}

std::any LLVMCodegen::visitBlockScopedNamespaceDecl(PrystParser::BlockScopedNamespaceDeclContext* ctx) {
    PRYST_DEBUG("Visiting block scoped namespace declaration");
    auto qualifiedId = visit(ctx->qualifiedIdentifier());
    std::string name = std::any_cast<std::string>(qualifiedId);
    currentNamespace.push_back(name);
    auto result = visitChildren(ctx);
    currentNamespace.pop_back();
    return result;
}

std::any LLVMCodegen::visitBlockScopedModuleDecl(PrystParser::BlockScopedModuleDeclContext* ctx) {
    PRYST_DEBUG("Visiting block scoped module declaration");
    auto qualifiedId = visit(ctx->qualifiedIdentifier());
    std::string name = std::any_cast<std::string>(qualifiedId);
    currentModule = name;
    auto result = visitChildren(ctx);
    currentModule.clear();
    return result;
}

std::any LLVMCodegen::visitNamespaceDecl(PrystParser::NamespaceDeclContext* ctx) {
    PRYST_DEBUG("Visiting namespace declaration");
    auto qualifiedId = visit(ctx->qualifiedIdentifier());
    std::string name = std::any_cast<std::string>(qualifiedId);
    currentNamespace.push_back(name);
    auto result = visitChildren(ctx);
    currentNamespace.pop_back();
    return result;
}

std::any LLVMCodegen::visitModuleDecl(PrystParser::ModuleDeclContext* ctx) {
    PRYST_DEBUG("Visiting module declaration");
    auto qualifiedId = visit(ctx->qualifiedIdentifier());
    std::string name = std::any_cast<std::string>(qualifiedId);
    currentModule = name;
    auto result = visitChildren(ctx);
    currentModule.clear();
    return result;
}

std::any LLVMCodegen::visitImportDecl(PrystParser::ImportDeclContext* ctx) {
    PRYST_DEBUG("Visiting import declaration");
    return visitChildren(ctx);
}

std::any LLVMCodegen::visitImportPath(PrystParser::ImportPathContext* ctx) {
    PRYST_DEBUG("Visiting import path");
    std::string path;
    for (auto id : ctx->IDENTIFIER()) {
        if (!path.empty()) path += "::";
        path += id->getText();
    }
    return path;
}

std::any LLVMCodegen::visitQualifiedIdentifier(PrystParser::QualifiedIdentifierContext* ctx) {
    PRYST_DEBUG("Visiting qualified identifier");
    std::string identifier;
    for (auto id : ctx->IDENTIFIER()) {
        if (!identifier.empty()) identifier += "::";
        identifier += id->getText();
    }
    return identifier;
}

// ... Continue implementing other visitor methods following the same pattern ...

} // namespace pryst
