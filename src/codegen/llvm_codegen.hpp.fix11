#pragma once

// Include ANTLR headers first
#include "../generated/PrystBaseVisitor.h"
#include "../generated/PrystParser.h"
#include "../generated/PrystLexer.h"

// Then include LLVM headers
#include <llvm/IR/Module.h>
#include <llvm/IR/IRBuilder.h>
#include <llvm/IR/LLVMContext.h>
#include <llvm/IR/Value.h>
#include <llvm/IR/Function.h>
#include <llvm/IR/Type.h>
#include <llvm/IR/Verifier.h>
#include <llvm/Support/raw_ostream.h>

// Include project headers
#include "type_registry.hpp"
#include "class_info.hpp"
#include "utils/debug.hpp"
#include <memory>
#include <string>
#include <map>
#include <set>

namespace pryst {

class LLVMCodegen : public PrystBaseVisitor {
public:
    LLVMCodegen();
    virtual ~LLVMCodegen() = default;

    // Module generation
    std::unique_ptr<llvm::Module> generateModule(PrystParser::ProgramContext* ctx);

    // Visitor methods - exactly matching grammar rules
    virtual std::any visitProgram(PrystParser::ProgramContext *ctx) override;
    virtual std::any visitDeclaration(PrystParser::DeclarationContext *ctx) override;
    virtual std::any visitUsingDecl(PrystParser::UsingDeclContext *ctx) override;
    virtual std::any visitGlobalUsingDecl(PrystParser::GlobalUsingDeclContext *ctx) override;
    virtual std::any visitBlockScopedNamespaceDecl(PrystParser::BlockScopedNamespaceDeclContext *ctx) override;
    virtual std::any visitBlockScopedModuleDecl(PrystParser::BlockScopedModuleDeclContext *ctx) override;
    virtual std::any visitNamespaceDecl(PrystParser::NamespaceDeclContext *ctx) override;
    virtual std::any visitModuleDecl(PrystParser::ModuleDeclContext *ctx) override;
    virtual std::any visitImportDecl(PrystParser::ImportDeclContext *ctx) override;
    virtual std::any visitImportPath(PrystParser::ImportPathContext *ctx) override;
    virtual std::any visitFunctionDecl(PrystParser::FunctionDeclContext *ctx) override;
    virtual std::any visitNamedFunction(PrystParser::NamedFunctionContext *ctx) override;
    virtual std::any visitLambdaFunction(PrystParser::LambdaFunctionContext *ctx) override;
    virtual std::any visitFunctionBody(PrystParser::FunctionBodyContext *ctx) override;
    virtual std::any visitVariableDecl(PrystParser::VariableDeclContext *ctx) override;
    virtual std::any visitClassDeclaration(PrystParser::ClassDeclarationContext *ctx) override;
    virtual std::any visitClassBody(PrystParser::ClassBodyContext *ctx) override;
    virtual std::any visitClassVariableDecl(PrystParser::ClassVariableDeclContext *ctx) override;
    virtual std::any visitClassFunctionDecl(PrystParser::ClassFunctionDeclContext *ctx) override;
    virtual std::any visitParamList(PrystParser::ParamListContext *ctx) override;
    virtual std::any visitParam(PrystParser::ParamContext *ctx) override;
    virtual std::any visitParamTypeList(PrystParser::ParamTypeListContext *ctx) override;
    virtual std::any visitType(PrystParser::TypeContext *ctx) override;
    virtual std::any visitIntType(PrystParser::IntTypeContext *ctx) override;
    virtual std::any visitFloatType(PrystParser::FloatTypeContext *ctx) override;
    virtual std::any visitBoolType(PrystParser::BoolTypeContext *ctx) override;
    virtual std::any visitStrType(PrystParser::StrTypeContext *ctx) override;
    virtual std::any visitVoidType(PrystParser::VoidTypeContext *ctx) override;
    virtual std::any visitIdentifierType(PrystParser::IdentifierTypeContext *ctx) override;
    virtual std::any visitArrayType(PrystParser::ArrayTypeContext *ctx) override;
    virtual std::any visitFunctionType(PrystParser::FunctionTypeContext *ctx) override;
    virtual std::any visitLambdaType(PrystParser::LambdaTypeContext *ctx) override;
    virtual std::any visitStatement(PrystParser::StatementContext *ctx) override;
    virtual std::any visitExprStatement(PrystParser::ExprStatementContext *ctx) override;
    virtual std::any visitIfStatement(PrystParser::IfStatementContext *ctx) override;
    virtual std::any visitWhileStatement(PrystParser::WhileStatementContext *ctx) override;
    virtual std::any visitForStatement(PrystParser::ForStatementContext *ctx) override;
    virtual std::any visitReturnStatement(PrystParser::ReturnStatementContext *ctx) override;
    virtual std::any visitBlockStatement(PrystParser::BlockStatementContext *ctx) override;
    virtual std::any visitTryStatement(PrystParser::TryStatementContext *ctx) override;
    virtual std::any visitPrintStatement(PrystParser::PrintStatementContext *ctx) override;
    virtual std::any visitExpression(PrystParser::ExpressionContext *ctx) override;
    virtual std::any visitAssignment(PrystParser::AssignmentContext *ctx) override;
    virtual std::any visitLogicOr(PrystParser::LogicOrContext *ctx) override;
    virtual std::any visitLogicAnd(PrystParser::LogicAndContext *ctx) override;
    virtual std::any visitEquality(PrystParser::EqualityContext *ctx) override;
    virtual std::any visitComparison(PrystParser::ComparisonContext *ctx) override;
    virtual std::any visitAddition(PrystParser::AdditionContext *ctx) override;
    virtual std::any visitMultiplication(PrystParser::MultiplicationContext *ctx) override;
    virtual std::any visitUnary(PrystParser::UnaryContext *ctx) override;
    virtual std::any visitPostfix(PrystParser::PostfixContext *ctx) override;
    virtual std::any visitSuffix(PrystParser::SuffixContext *ctx) override;
    virtual std::any visitCallSuffix(PrystParser::CallSuffixContext *ctx) override;
    virtual std::any visitMemberSuffix(PrystParser::MemberSuffixContext *ctx) override;
    virtual std::any visitCall(PrystParser::CallContext *ctx) override;
    virtual std::any visitPrimary(PrystParser::PrimaryContext *ctx) override;
    virtual std::any visitQualifiedIdentifier(PrystParser::QualifiedIdentifierContext *ctx) override;
    virtual std::any visitNewExpression(PrystParser::NewExpressionContext *ctx) override;
    virtual std::any visitArguments(PrystParser::ArgumentsContext *ctx) override;
    virtual std::any visitTypeCastExpr(PrystParser::TypeCastExprContext *ctx) override;
    virtual std::any visitTypeConversionExpr(PrystParser::TypeConversionExprContext *ctx) override;
    virtual std::any visitClassConversionExpr(PrystParser::ClassConversionExprContext *ctx) override;
    virtual std::any visitTryCatchStatement(PrystParser::TryCatchStatementContext *ctx) override;
    virtual std::any visitSimpleString(PrystParser::SimpleStringContext *ctx) override;

private:
    // Helper methods
    void declarePrintFunctions();
    void declareBuiltinFunctions();
    llvm::Function* declareBoolToStr();
    llvm::Function* declareIntToStr();
    llvm::Function* declareFloatToStr();
    llvm::Function* declareStrConcat();
    llvm::Function* declareMathFunctions();
    llvm::Function* getFunctionProto(const std::string& name, llvm::FunctionType* type);
    llvm::Value* getVariableValue(const std::string& name);
    llvm::AllocaInst* createEntryBlockAlloca(llvm::Function* function, const std::string& varName, llvm::Type* type);
    void createBasicBlock(const std::string& name);
    llvm::Value* createCastInstruction(llvm::Value* value, llvm::Type* destType, bool isSigned = true);

    // Member variables
    std::unique_ptr<llvm::LLVMContext> context;
    std::unique_ptr<llvm::Module> module;
    std::unique_ptr<llvm::IRBuilder<>> builder;
    LLVMTypeRegistry typeRegistry;
    std::map<std::string, llvm::Value*> namedValues;
    llvm::Function* currentFunction;
    std::map<std::string, llvm::Function*> printFunctions;
    std::vector<std::string> currentNamespace;
    std::string currentModule;
    std::set<std::string> importedModules;
    std::set<std::string> activeModules;
    std::set<std::string> activeNamespaces;
};

} // namespace pryst
