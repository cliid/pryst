#include "llvm_codegen.hpp"
#include "utils/debug.hpp"
#include <llvm/IR/Verifier.h>
#include <llvm/Support/raw_ostream.h>
#include <sstream>

namespace pryst {

LLVMCodegen::LLVMCodegen()
    : context(std::make_unique<llvm::LLVMContext>()),
      module(std::make_unique<llvm::Module>("pryst_module", *context)),
      builder(std::make_unique<llvm::IRBuilder<>>(*context)),
      typeRegistry(*context),
      currentFunction(nullptr) {
    declarePrintFunctions();
}

std::unique_ptr<llvm::Module> LLVMCodegen::generateModule(PrystParser::ProgramContext* ctx) {
    PRYST_DEBUG("Generating module");
    visitProgram(ctx);
    return std::move(module);
}

std::any LLVMCodegen::visitProgram(PrystParser::ProgramContext *ctx) {
    PRYST_DEBUG("Visiting program");
    for (auto decl : ctx->declaration()) {
        visit(decl);
    }
    return nullptr;
}

std::any LLVMCodegen::visitDeclaration(PrystParser::DeclarationContext *ctx) {
    PRYST_DEBUG("Visiting declaration");
    return visitChildren(ctx);
}

std::any LLVMCodegen::visitGlobalUsingDecl(PrystParser::GlobalUsingDeclContext *ctx) {
    PRYST_DEBUG("Visiting global using declaration");
    std::string target = ctx->IDENTIFIER()->getText();
    if (ctx->MODULE()) {
        activeModules.insert(target);
    } else {
        activeNamespaces.insert(target);
    }
    return nullptr;
}

std::any LLVMCodegen::visitBlockScopedNamespaceDecl(PrystParser::BlockScopedNamespaceDeclContext *ctx) {
    PRYST_DEBUG("Visiting block scoped namespace declaration");
    std::string name = ctx->IDENTIFIER()->getText();
    currentNamespace.push_back(name);
    auto result = visitChildren(ctx);
    currentNamespace.pop_back();
    return result;
}

std::any LLVMCodegen::visitBlockScopedModuleDecl(PrystParser::BlockScopedModuleDeclContext *ctx) {
    PRYST_DEBUG("Visiting block scoped module declaration");
    std::string name = ctx->IDENTIFIER()->getText();
    currentModule = name;
    auto result = visitChildren(ctx);
    currentModule.clear();
    return result;
}

std::any LLVMCodegen::visitNamespaceDecl(PrystParser::NamespaceDeclContext *ctx) {
    PRYST_DEBUG("Visiting namespace declaration");
    std::string name = ctx->IDENTIFIER()->getText();
    currentNamespace.push_back(name);
    auto result = visitChildren(ctx);
    currentNamespace.pop_back();
    return result;
}

std::any LLVMCodegen::visitModuleDecl(PrystParser::ModuleDeclContext *ctx) {
    PRYST_DEBUG("Visiting module declaration");
    std::string name = ctx->IDENTIFIER()->getText();
    currentModule = name;
    auto result = visitChildren(ctx);
    currentModule.clear();
    return result;
}

std::any LLVMCodegen::visitImportDecl(PrystParser::ImportDeclContext *ctx) {
    PRYST_DEBUG("Visiting import declaration");
    std::string importPath;
    for (auto id : ctx->IDENTIFIER()) {
        if (!importPath.empty()) importPath += "::";
        importPath += id->getText();
    }
    importedModules.insert(importPath);
    return nullptr;
}

std::any LLVMCodegen::visitImportPath(PrystParser::ImportPathContext *ctx) {
    PRYST_DEBUG("Visiting import path");
    return visitChildren(ctx);
}

std::any LLVMCodegen::visitFunctionDecl(PrystParser::FunctionDeclContext *ctx) {
    PRYST_DEBUG("Visiting function declaration");
    return visitChildren(ctx);
}

std::any LLVMCodegen::visitNamedFunction(PrystParser::NamedFunctionContext *ctx) {
    PRYST_DEBUG("Visiting named function");
    // Implementation details...
    return nullptr;
}

std::any LLVMCodegen::visitLambdaFunction(PrystParser::LambdaFunctionContext *ctx) {
    PRYST_DEBUG("Visiting lambda function");
    // Implementation details...
    return nullptr;
}

std::any LLVMCodegen::visitFunctionBody(PrystParser::FunctionBodyContext *ctx) {
    PRYST_DEBUG("Visiting function body");
    return visitChildren(ctx);
}

std::any LLVMCodegen::visitVariableDecl(PrystParser::VariableDeclContext *ctx) {
    PRYST_DEBUG("Visiting variable declaration");
    // Implementation details...
    return nullptr;
}


std::any LLVMCodegen::visitClassDeclaration(PrystParser::ClassDeclarationContext *ctx) {
    PRYST_DEBUG("Visiting class declaration");
    // Implementation details...
    return nullptr;
}

std::any LLVMCodegen::visitClassBody(PrystParser::ClassBodyContext *ctx) {
    PRYST_DEBUG("Visiting class body");
    return visitChildren(ctx);
}

std::any LLVMCodegen::visitClassVariableDecl(PrystParser::ClassVariableDeclContext *ctx) {
    PRYST_DEBUG("Visiting class variable declaration");
    // Implementation details...
    return nullptr;
}

std::any LLVMCodegen::visitClassFunctionDecl(PrystParser::ClassFunctionDeclContext *ctx) {
    PRYST_DEBUG("Visiting class function declaration");
    // Implementation details...
    return nullptr;
}

std::any LLVMCodegen::visitParamList(PrystParser::ParamListContext *ctx) {
    PRYST_DEBUG("Visiting parameter list");
    return visitChildren(ctx);
}

std::any LLVMCodegen::visitParam(PrystParser::ParamContext *ctx) {
    PRYST_DEBUG("Visiting parameter");
    return visitChildren(ctx);
}

std::any LLVMCodegen::visitParamTypeList(PrystParser::ParamTypeListContext *ctx) {
    PRYST_DEBUG("Visiting parameter type list");
    return visitChildren(ctx);
}

std::any LLVMCodegen::visitFloatType(PrystParser::FloatTypeContext *ctx) {
    PRYST_DEBUG("Visiting float type");
    return typeRegistry.getFloatType();
}

std::any LLVMCodegen::visitLambdaType(PrystParser::LambdaTypeContext *ctx) {
    PRYST_DEBUG("Visiting lambda type");
    // Implementation details...
    return nullptr;
}

std::any LLVMCodegen::visitArrayType(PrystParser::ArrayTypeContext *ctx) {
    PRYST_DEBUG("Visiting array type");
    // Implementation details...
    return nullptr;
}

std::any LLVMCodegen::visitStrType(PrystParser::StrTypeContext *ctx) {
    PRYST_DEBUG("Visiting string type");
    return typeRegistry.getStringType();
}

std::any LLVMCodegen::visitIntType(PrystParser::IntTypeContext *ctx) {
    PRYST_DEBUG("Visiting int type");
    return typeRegistry.getIntType();
}

std::any LLVMCodegen::visitVoidType(PrystParser::VoidTypeContext *ctx) {
    PRYST_DEBUG("Visiting void type");
    return typeRegistry.getVoidType();
}

std::any LLVMCodegen::visitIdentifierType(PrystParser::IdentifierTypeContext *ctx) {
    PRYST_DEBUG("Visiting identifier type");
    // Implementation details...
    return nullptr;
}

std::any LLVMCodegen::visitFunctionType(PrystParser::FunctionTypeContext *ctx) {
    PRYST_DEBUG("Visiting function type");
    // Implementation details...
    return nullptr;
}

std::any LLVMCodegen::visitBoolType(PrystParser::BoolTypeContext *ctx) {
    PRYST_DEBUG("Visiting bool type");
    return typeRegistry.getBoolType();
}

std::any LLVMCodegen::visitExprStatement(PrystParser::ExprStatementContext *ctx) {
    PRYST_DEBUG("Visiting expression statement");
    return visitChildren(ctx);
}

std::any LLVMCodegen::visitIfStatement(PrystParser::IfStatementContext *ctx) {
    PRYST_DEBUG("Visiting if statement");
    // Implementation details...
    return nullptr;
}

std::any LLVMCodegen::visitWhileStatement(PrystParser::WhileStatementContext *ctx) {
    PRYST_DEBUG("Visiting while statement");
    // Implementation details...
    return nullptr;
}

std::any LLVMCodegen::visitForStatement(PrystParser::ForStatementContext *ctx) {
    PRYST_DEBUG("Visiting for statement");
    // Implementation details...
    return nullptr;
}

std::any LLVMCodegen::visitReturnStatement(PrystParser::ReturnStatementContext *ctx) {
    PRYST_DEBUG("Visiting return statement");
    // Implementation details...
    return nullptr;
}

std::any LLVMCodegen::visitBlockStatement(PrystParser::BlockStatementContext *ctx) {
    PRYST_DEBUG("Visiting block statement");
    return visitChildren(ctx);
}

std::any LLVMCodegen::visitTryStatement(PrystParser::TryStatementContext *ctx) {
    PRYST_DEBUG("Visiting try statement");
    // Implementation details...
    return nullptr;
}

std::any LLVMCodegen::visitPrintStatement(PrystParser::PrintStatementContext *ctx) {
    PRYST_DEBUG("Visiting print statement");
    // Implementation details...
    return nullptr;
}

std::any LLVMCodegen::visitExpression(PrystParser::ExpressionContext *ctx) {
    PRYST_DEBUG("Visiting expression");
    return visitChildren(ctx);
}

std::any LLVMCodegen::visitSimpleString(PrystParser::SimpleStringContext *ctx) {
    PRYST_DEBUG("Visiting simple string");
    // Implementation details...
    return nullptr;
}

std::any LLVMCodegen::visitAssignment(PrystParser::AssignmentContext *ctx) {
    PRYST_DEBUG("Visiting assignment");
    // Implementation details...
    return nullptr;
}

std::any LLVMCodegen::visitLogicOr(PrystParser::LogicOrContext *ctx) {
    PRYST_DEBUG("Visiting logic or");
    // Implementation details...
    return nullptr;
}

std::any LLVMCodegen::visitLogicAnd(PrystParser::LogicAndContext *ctx) {
    PRYST_DEBUG("Visiting logic and");
    // Implementation details...
    return nullptr;
}

std::any LLVMCodegen::visitEquality(PrystParser::EqualityContext *ctx) {
    PRYST_DEBUG("Visiting equality");
    // Implementation details...
    return nullptr;
}

std::any LLVMCodegen::visitComparison(PrystParser::ComparisonContext *ctx) {
    PRYST_DEBUG("Visiting comparison");
    // Implementation details...
    return nullptr;
}

std::any LLVMCodegen::visitAddition(PrystParser::AdditionContext *ctx) {
    PRYST_DEBUG("Visiting addition");
    // Implementation details...
    return nullptr;
}

std::any LLVMCodegen::visitMultiplication(PrystParser::MultiplicationContext *ctx) {
    PRYST_DEBUG("Visiting multiplication");
    // Implementation details...
    return nullptr;
}

std::any LLVMCodegen::visitUnary(PrystParser::UnaryContext *ctx) {
    PRYST_DEBUG("Visiting unary");
    // Implementation details...
    return nullptr;
}

std::any LLVMCodegen::visitPostfix(PrystParser::PostfixContext *ctx) {
    PRYST_DEBUG("Visiting postfix");
    return visitChildren(ctx);
}

std::any LLVMCodegen::visitSuffix(PrystParser::SuffixContext *ctx) {
    PRYST_DEBUG("Visiting suffix");
    return visitChildren(ctx);
}

std::any LLVMCodegen::visitCallSuffix(PrystParser::CallSuffixContext *ctx) {
    PRYST_DEBUG("Visiting call suffix");
    // Implementation details...
    return nullptr;
}

std::any LLVMCodegen::visitMemberSuffix(PrystParser::MemberSuffixContext *ctx) {
    PRYST_DEBUG("Visiting member suffix");
    // Implementation details...
    return nullptr;
}

std::any LLVMCodegen::visitCall(PrystParser::CallContext *ctx) {
    PRYST_DEBUG("Visiting call");
    // Implementation details...
    return nullptr;
}

std::any LLVMCodegen::visitPrimary(PrystParser::PrimaryContext *ctx) {
    PRYST_DEBUG("Visiting primary");
    return visitChildren(ctx);
}

std::any LLVMCodegen::visitQualifiedIdentifier(PrystParser::QualifiedIdentifierContext *ctx) {
    PRYST_DEBUG("Visiting qualified identifier");
    // Implementation details...
    return nullptr;
}

std::any LLVMCodegen::visitNewExpression(PrystParser::NewExpressionContext *ctx) {
    PRYST_DEBUG("Visiting new expression");
    // Implementation details...
    return nullptr;
}

std::any LLVMCodegen::visitArguments(PrystParser::ArgumentsContext *ctx) {
    PRYST_DEBUG("Visiting arguments");
    return visitChildren(ctx);
}

std::any LLVMCodegen::visitTypeCastExpr(PrystParser::TypeCastExprContext *ctx) {
    PRYST_DEBUG("Visiting type cast expression");
    // Implementation details...
    return nullptr;
}

std::any LLVMCodegen::visitTypeConversionExpr(PrystParser::TypeConversionExprContext *ctx) {
    PRYST_DEBUG("Visiting type conversion expression");
    // Implementation details...
    return nullptr;
}

std::any LLVMCodegen::visitClassConversionExpr(PrystParser::ClassConversionExprContext *ctx) {
    PRYST_DEBUG("Visiting class conversion expression");
    // Implementation details...
    return nullptr;
}

std::any LLVMCodegen::visitTryCatchStatement(PrystParser::TryCatchStatementContext *ctx) {
    PRYST_DEBUG("Visiting try-catch statement");
    // Implementation details...
    return nullptr;
}

void LLVMCodegen::declarePrintFunctions() {
    PRYST_DEBUG("Declaring print functions");
    // Implementation details...
}

llvm::Function* LLVMCodegen::getFunctionProto(const std::string& name, llvm::FunctionType* type) {
    PRYST_DEBUG("Getting function prototype for: " + name);
    // Implementation details...
    return nullptr;
}

llvm::Value* LLVMCodegen::getVariableValue(const std::string& name) {
    PRYST_DEBUG("Getting variable value for: " + name);
    // Implementation details...
    return nullptr;
}

llvm::AllocaInst* LLVMCodegen::createEntryBlockAlloca(llvm::Function* function,
                                                     const std::string& varName,
                                                     llvm::Type* type) {
    PRYST_DEBUG("Creating entry block alloca for: " + varName);
    // Implementation details...
    return nullptr;
}

void LLVMCodegen::createBasicBlock(const std::string& name) {
    PRYST_DEBUG("Creating basic block: " + name);
    // Implementation details...
}

llvm::Value* LLVMCodegen::createCastInstruction(llvm::Value* value,
                                               llvm::Type* destType,
                                               bool isSigned) {
    PRYST_DEBUG("Creating cast instruction");
    // Implementation details...
    return nullptr;
}

} // namespace pryst
