// Helper function to get member index in a class
int getMemberIndex(llvm::Type* type, const std::string& memberName) {
    if (!type) return -1;

    auto* structType = llvm::dyn_cast<llvm::StructType>(type);
    if (!structType) {
        PRYST_ERROR("Type is not a struct type");
        return -1;
    }

    // Look up the member index in our class info
    auto className = structType->getName().str();
    auto classInfo = classInfoMap.find(className);
    if (classInfo == classInfoMap.end()) {
        PRYST_ERROR("Class info not found for: " + className);
        return -1;
    }

    return classInfo->second.getMemberIndex(memberName);
}

// Helper function to create appropriate cast instruction
llvm::Value* createCastInstruction(llvm::Value* value, TypeInfoPtr targetType) {
    if (!value || !targetType) return nullptr;

    auto sourceType = value->getType();
    auto targetLLVMType = typeRegistry.getLLVMType(targetType, *context);

    // Handle numeric type conversions
    if (sourceType->isIntegerTy() && targetLLVMType->isFloatingPointTy()) {
        return builder->CreateSIToFP(value, targetLLVMType);
    }
    if (sourceType->isFloatingPointTy() && targetLLVMType->isIntegerTy()) {
        return builder->CreateFPToSI(value, targetLLVMType);
    }
    if (sourceType->isIntegerTy() && targetLLVMType->isIntegerTy()) {
        unsigned sourceBits = sourceType->getIntegerBitWidth();
        unsigned targetBits = targetLLVMType->getIntegerBitWidth();
        if (sourceBits < targetBits) {
            return builder->CreateSExt(value, targetLLVMType);
        } else if (sourceBits > targetBits) {
            return builder->CreateTrunc(value, targetLLVMType);
        }
    }

    // If types are the same, no cast needed
    if (sourceType == targetLLVMType) {
        return value;
    }

    // For pointer types, use bitcast
    if (sourceType->isPointerTy() && targetLLVMType->isPointerTy()) {
        return builder->CreateBitCast(value, targetLLVMType);
    }

    PRYST_ERROR("Unsupported type cast from " +
                std::string(sourceType->getStructName()) + " to " +
                targetType->getName());
    return nullptr;
}
