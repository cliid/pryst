#include "llvm_codegen.hpp"
#include "utils/logger.hpp"
#include <llvm/IR/Function.h>
#include <llvm/IR/Type.h>
#include <llvm/IR/DerivedTypes.h>

namespace pryst {

llvm::Function* LLVMCodegen::declareBoolToStr() {
    PRYST_DEBUG("Declaring bool_to_str function");

    std::vector<llvm::Type*> argTypes = {
        llvm::Type::getInt1Ty(*context)
    };

    auto strType = typeRegistry.getStringType();
    auto functionType = llvm::FunctionType::get(strType, argTypes, false);

    auto function = llvm::Function::Create(
        functionType,
        llvm::Function::ExternalLinkage,
        "bool_to_str",
        module.get()
    );

    auto entryBlock = llvm::BasicBlock::Create(*context, "entry", function);
    builder->SetInsertPoint(entryBlock);

    // Get function argument
    auto arg = function->arg_begin();
    arg->setName("value");

    // Create basic blocks for true and false cases
    auto trueBlock = llvm::BasicBlock::Create(*context, "true", function);
    auto falseBlock = llvm::BasicBlock::Create(*context, "false", function);
    auto mergeBlock = llvm::BasicBlock::Create(*context, "merge", function);

    // Branch based on the input value
    builder->CreateCondBr(arg, trueBlock, falseBlock);

    // True block
    builder->SetInsertPoint(trueBlock);
    auto trueStr = builder->CreateGlobalString("true");
    builder->CreateBr(mergeBlock);

    // False block
    builder->SetInsertPoint(falseBlock);
    auto falseStr = builder->CreateGlobalString("false");
    builder->CreateBr(mergeBlock);

    // Merge block
    builder->SetInsertPoint(mergeBlock);
    auto phi = builder->CreatePHI(strType, 2);
    phi->addIncoming(trueStr, trueBlock);
    phi->addIncoming(falseStr, falseBlock);
    builder->CreateRet(phi);

    return function;
}

llvm::Function* LLVMCodegen::declareIntToStr() {
    PRYST_DEBUG("Declaring int_to_str function");

    std::vector<llvm::Type*> argTypes = {
        llvm::Type::getInt32Ty(*context)
    };

    auto strType = typeRegistry.getStringType();
    auto functionType = llvm::FunctionType::get(strType, argTypes, false);

    auto function = llvm::Function::Create(
        functionType,
        llvm::Function::ExternalLinkage,
        "int_to_str",
        module.get()
    );

    auto entryBlock = llvm::BasicBlock::Create(*context, "entry", function);
    builder->SetInsertPoint(entryBlock);

    // Get function argument
    auto arg = function->arg_begin();
    arg->setName("value");

    // Convert int to string using sprintf
    auto bufferSize = 32;
    auto buffer = builder->CreateAlloca(
        llvm::ArrayType::get(llvm::Type::getInt8Ty(*context), bufferSize),
        nullptr,
        "buffer"
    );

    // Create format string for sprintf
    auto formatStr = builder->CreateGlobalString("%d");

    // Call sprintf
    std::vector<llvm::Value*> sprintfArgs = {
        buffer,
        formatStr,
        arg
    };

    auto sprintfFn = module->getOrInsertFunction(
        "sprintf",
        llvm::FunctionType::get(
            llvm::Type::getInt32Ty(*context),
            {typeRegistry.getOpaquePointerType(*context),
             typeRegistry.getOpaquePointerType(*context),
             llvm::Type::getInt32Ty(*context)},
            false
        )
    );

    builder->CreateCall(sprintfFn, sprintfArgs);

    // Create string from buffer
    auto result = builder->CreateGlobalString("");
    builder->CreateRet(result);

    return function;
}

llvm::Function* LLVMCodegen::declareFloatToStr() {
    PRYST_DEBUG("Declaring float_to_str function");

    std::vector<llvm::Type*> argTypes = {
        llvm::Type::getDoubleTy(*context)
    };

    auto strType = typeRegistry.getStringType();
    auto functionType = llvm::FunctionType::get(strType, argTypes, false);

    auto function = llvm::Function::Create(
        functionType,
        llvm::Function::ExternalLinkage,
        "float_to_str",
        module.get()
    );

    auto entryBlock = llvm::BasicBlock::Create(*context, "entry", function);
    builder->SetInsertPoint(entryBlock);

    // Get function argument
    auto arg = function->arg_begin();
    arg->setName("value");

    // Convert float to string using sprintf
    auto bufferSize = 32;
    auto buffer = builder->CreateAlloca(
        llvm::ArrayType::get(llvm::Type::getInt8Ty(*context), bufferSize),
        nullptr,
        "buffer"
    );

    // Create format string for sprintf
    auto formatStr = builder->CreateGlobalString("%.6f");

    // Call sprintf
    std::vector<llvm::Value*> sprintfArgs = {
        buffer,
        formatStr,
        arg
    };

    auto sprintfFn = module->getOrInsertFunction(
        "sprintf",
        llvm::FunctionType::get(
            llvm::Type::getInt32Ty(*context),
            {typeRegistry.getOpaquePointerType(*context),
             typeRegistry.getOpaquePointerType(*context),
             llvm::Type::getDoubleTy(*context)},
            false
        )
    );

    builder->CreateCall(sprintfFn, sprintfArgs);

    // Create string from buffer
    auto result = builder->CreateGlobalString("");
    builder->CreateRet(result);

    return function;
}

} // namespace pryst
