#include "llvm_codegen.hpp"
#include "utils/debug.hpp"
#include <llvm/IR/Verifier.h>
#include <llvm/Support/raw_ostream.h>
#include <sstream>

namespace pryst {

LLVMCodegen::LLVMCodegen()
    : context(std::make_unique<llvm::LLVMContext>()),
      module(std::make_unique<llvm::Module>("pryst_module", *context)),
      builder(std::make_unique<llvm::IRBuilder<>>(*context)),
      typeRegistry(*context),
      currentFunction(nullptr) {
    declarePrintFunctions();
}

std::unique_ptr<llvm::Module> LLVMCodegen::generateModule(PrystParser::ProgramContext* ctx) {
    PRYST_DEBUG("Generating module");
    visitProgram(ctx);
    return std::move(module);
}

std::any LLVMCodegen::visitProgram(PrystParser::ProgramContext *ctx) {
    PRYST_DEBUG("Visiting program");
    for (auto decl : ctx->declaration()) {
        visit(decl);
    }
    return nullptr;
}

std::any LLVMCodegen::visitDeclaration(PrystParser::DeclarationContext *ctx) {
    PRYST_DEBUG("Visiting declaration");
    return visitChildren(ctx);
}

std::any LLVMCodegen::visitGlobalUsingDecl(PrystParser::GlobalUsingDeclContext *ctx) {
    PRYST_DEBUG("Visiting global using declaration");
    auto qualifiedId = visit(ctx->qualifiedIdentifier());
    std::string target = std::any_cast<std::string>(qualifiedId);
    if (ctx->MODULE()) {
        activeModules.insert(target);
    } else {
        activeNamespaces.insert(target);
    }
    return nullptr;
}

std::any LLVMCodegen::visitBlockScopedNamespaceDecl(PrystParser::BlockScopedNamespaceDeclContext *ctx) {
    PRYST_DEBUG("Visiting block scoped namespace declaration");
    auto qualifiedId = visit(ctx->qualifiedIdentifier());
    std::string name = std::any_cast<std::string>(qualifiedId);
    currentNamespace.push_back(name);
    auto result = visitChildren(ctx);
    currentNamespace.pop_back();
    return result;
}

std::any LLVMCodegen::visitBlockScopedModuleDecl(PrystParser::BlockScopedModuleDeclContext *ctx) {
    PRYST_DEBUG("Visiting block scoped module declaration");
    auto qualifiedId = visit(ctx->qualifiedIdentifier());
    std::string name = std::any_cast<std::string>(qualifiedId);
    currentModule = name;
    auto result = visitChildren(ctx);
    currentModule.clear();
    return result;
}

std::any LLVMCodegen::visitNamespaceDecl(PrystParser::NamespaceDeclContext *ctx) {
    PRYST_DEBUG("Visiting namespace declaration");
    auto qualifiedId = visit(ctx->qualifiedIdentifier());
    std::string name = std::any_cast<std::string>(qualifiedId);
    currentNamespace.push_back(name);
    auto result = visitChildren(ctx);
    currentNamespace.pop_back();
    return result;
}

std::any LLVMCodegen::visitModuleDecl(PrystParser::ModuleDeclContext *ctx) {
    PRYST_DEBUG("Visiting module declaration");
    auto qualifiedId = visit(ctx->qualifiedIdentifier());
    std::string name = std::any_cast<std::string>(qualifiedId);
    currentModule = name;
    auto result = visitChildren(ctx);
    currentModule.clear();
    return result;
}

std::any LLVMCodegen::visitImportDecl(PrystParser::ImportDeclContext *ctx) {
    PRYST_DEBUG("Visiting import declaration");
    auto importPath = visit(ctx->importPath());
    std::string path = std::any_cast<std::string>(importPath);
    importedModules.insert(path);
    return nullptr;
}

std::any LLVMCodegen::visitImportPath(PrystParser::ImportPathContext *ctx) {
    PRYST_DEBUG("Visiting import path");
    std::string path;
    for (auto id : ctx->IDENTIFIER()) {
        if (!path.empty()) path += "::";
        path += id->getText();
    }
    return path;
}

std::any LLVMCodegen::visitQualifiedIdentifier(PrystParser::QualifiedIdentifierContext *ctx) {
    PRYST_DEBUG("Visiting qualified identifier");
    std::string identifier;
    for (auto id : ctx->IDENTIFIER()) {
        if (!identifier.empty()) identifier += "::";
        identifier += id->getText();
    }
    return identifier;
}

// Continue implementing all other visitor methods...
// Each method should follow the pattern of:
// 1. Debug output
// 2. Visit children or handle specific logic
// 3. Return appropriate value

void LLVMCodegen::declarePrintFunctions() {
    PRYST_DEBUG("Declaring print functions");
    // Implementation details...
}

llvm::Function* LLVMCodegen::getFunctionProto(const std::string& name, llvm::FunctionType* type) {
    PRYST_DEBUG("Getting function prototype for: " + name);
    // Implementation details...
    return nullptr;
}

llvm::Value* LLVMCodegen::getVariableValue(const std::string& name) {
    PRYST_DEBUG("Getting variable value for: " + name);
    // Implementation details...
    return nullptr;
}

llvm::AllocaInst* LLVMCodegen::createEntryBlockAlloca(llvm::Function* function,
                                                     const std::string& varName,
                                                     llvm::Type* type) {
    PRYST_DEBUG("Creating entry block alloca for: " + varName);
    // Implementation details...
    return nullptr;
}

void LLVMCodegen::createBasicBlock(const std::string& name) {
    PRYST_DEBUG("Creating basic block: " + name);
    // Implementation details...
}

llvm::Value* LLVMCodegen::createCastInstruction(llvm::Value* value,
                                               llvm::Type* destType,
                                               bool isSigned) {
    PRYST_DEBUG("Creating cast instruction");
    // Implementation details...
    return nullptr;
}

} // namespace pryst
