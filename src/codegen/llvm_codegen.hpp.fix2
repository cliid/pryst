#pragma once

// Include ANTLR headers first
#include "../generated/PrystBaseVisitor.h"
#include "../generated/PrystParser.h"
#include "../generated/PrystLexer.h"

// Then include LLVM headers
#include <llvm/IR/Module.h>
#include <llvm/IR/IRBuilder.h>
#include <llvm/IR/LLVMContext.h>
#include <llvm/IR/Value.h>
#include <llvm/IR/Function.h>
#include <llvm/IR/Type.h>
#include <llvm/IR/Verifier.h>
#include <llvm/Support/raw_ostream.h>

// Include project headers
#include "type_registry.hpp"
#include "class_info.hpp"
#include "utils/debug.hpp"
#include <memory>
#include <string>
#include <map>
#include <any>

namespace pryst {

class LLVMCodegen : public PrystBaseVisitor {
public:
    LLVMCodegen();
    virtual ~LLVMCodegen() = default;

    // Module generation
    std::unique_ptr<llvm::Module> generateModule(PrystParser::ProgramContext* ctx);

    // Visitor methods
    std::any visitProgram(PrystParser::ProgramContext* ctx) override;
    std::any visitFunctionDecl(PrystParser::FunctionDeclContext* ctx) override;
    std::any visitClassDecl(PrystParser::ClassDeclContext* ctx) override;
    std::any visitMethodDecl(PrystParser::MethodDeclContext* ctx) override;
    std::any visitVariableDecl(PrystParser::VariableDeclContext* ctx) override;
    std::any visitBlock(PrystParser::BlockContext* ctx) override;
    std::any visitExpressionStmt(PrystParser::ExpressionStmtContext* ctx) override;
    std::any visitIfStmt(PrystParser::IfStmtContext* ctx) override;
    std::any visitWhileStmt(PrystParser::WhileStmtContext* ctx) override;
    std::any visitReturnStmt(PrystParser::ReturnStmtContext* ctx) override;
    std::any visitCall(PrystParser::CallContext* ctx) override;
    std::any visitBinary(PrystParser::BinaryContext* ctx) override;
    std::any visitUnary(PrystParser::UnaryContext* ctx) override;
    std::any visitLiteral(PrystParser::LiteralContext* ctx) override;
    std::any visitVariable(PrystParser::VariableContext* ctx) override;
    std::any visitAssignment(PrystParser::AssignmentContext* ctx) override;
    std::any visitLambda(PrystParser::LambdaContext* ctx) override;
    std::any visitNamespace(PrystParser::NamespaceContext* ctx) override;
    std::any visitModule(PrystParser::ModuleContext* ctx) override;
    std::any visitImport(PrystParser::ImportContext* ctx) override;
    std::any visitUsingDecl(PrystParser::UsingDeclContext* ctx) override;

private:
    // Helper methods
    void declarePrintFunctions();
    llvm::Function* getFunctionProto(const std::string& name, llvm::FunctionType* type);
    llvm::Value* getVariableValue(const std::string& name);
    llvm::AllocaInst* createEntryBlockAlloca(llvm::Function* function, const std::string& varName, llvm::Type* type);
    void createBasicBlock(const std::string& name);
    llvm::Value* createCastInstruction(llvm::Value* value, llvm::Type* destType, bool isSigned = true);

    // Member variables
    std::unique_ptr<llvm::LLVMContext> context;
    std::unique_ptr<llvm::Module> module;
    std::unique_ptr<llvm::IRBuilder<>> builder;
    LLVMTypeRegistry typeRegistry;
    std::map<std::string, llvm::Value*> namedValues;
    llvm::Function* currentFunction;
    std::map<std::string, llvm::Function*> printFunctions;
    std::vector<std::string> currentNamespace;
    std::string currentModule;
};

} // namespace pryst
